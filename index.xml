<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CS Student | Passionate Developer on Aldrin Jenson</title><link>/</link><description>Aldrin Jenson (CS Student | Passionate Developer)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 17 Oct 2021 19:19:16 +0530</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>How to SSH to Termux Shell</title><link>/posts/ssh-termux/</link><pubDate>Fri, 27 Jan 2023 03:06:56 +0530</pubDate><guid>/posts/ssh-termux/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>Easy way to ssh to termux shell running on Android&lt;/p>
&lt;h1 id="prerequisites">Prerequisites&lt;/h1>
&lt;ul>
&lt;li>A device running Android with Termux installed&lt;/li>
&lt;li>A Linux machine with OpenSSH installed&lt;/li>
&lt;/ul>
&lt;h2 id="steps">Steps&lt;/h2>
&lt;ol>
&lt;li>Find the IP address of termux using the following command&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ip addr | grep &lt;span style="color:#ae81ff">192&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>install open ssh&lt;/li>
&lt;li>start ssh service using the following&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Find hostname of termux machine using &lt;code>hostname&lt;/code> command&lt;/li>
&lt;li>From host machine, perform ssh using the following command&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> ssh -p &lt;span style="color:#ae81ff">8022&lt;/span> $hostname@$phoneIp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="6">
&lt;li>The END&lt;/li>
&lt;/ol>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Tada, You&amp;rsquo;ve successfully done ssh to termux✨&lt;/p>
&lt;p>Use termux to start webservers (Apache, Nginx etc) just like you would normally do in a Linux machine and you can expose it to the internet using free services like ngrok.&lt;/p>
&lt;h2 id="bonus-tip">Bonus Tip&lt;/h2>
&lt;p>replace &lt;code>ssh&lt;/code> in step 5 using &lt;code>sftp&lt;/code> and suddenly you now have an extremely safe and easy way to transfer files to and from your phone. You&amp;rsquo;re welcome😊&lt;/p>
&lt;h2 id="troubleshooting">Troubleshooting&lt;/h2>
&lt;ul>
&lt;li>Connection refused: Make sure that your device is connected to the same network as your Linux machine and that the SSH service is running on Termux.&lt;/li>
&lt;li>Incorrect IP address: Double-check that you have the correct IP address of your device.&lt;/li>
&lt;li>Firewall issues: Make sure that your firewall is not blocking the SSH connection.&lt;/li>
&lt;/ul>
&lt;h2 id="additional-resources">Additional Resources&lt;/h2>
&lt;p>-&lt;a href="https://wiki.termux.com/wiki/Main_Page">Termux Wiki&lt;/a>
-&lt;a href="https://www.openssh.com/">OpenSSH&lt;/a>&lt;/p></description></item><item><title>How to crack almost any OS password</title><link>/posts/crack-os-password/</link><pubDate>Mon, 16 Jan 2023 02:33:48 +0530</pubDate><guid>/posts/crack-os-password/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Use the infamous &lt;a href="https://github.com/ohmybahgosh/RockYou2021.txt">RockYou.txt&lt;/a> password list containing 14 million used passwords to brute force the user passwords in almost any system you&amp;rsquo;ve got&lt;/p>
&lt;blockquote>
&lt;p>Your computer is not safe, make your password stronger&lt;/p>
&lt;/blockquote>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;ul>
&lt;li>boot into the system using kali live usb&lt;/li>
&lt;li>create a hash of etc password and etc shadow (default location where passwords are stored in Linux)&lt;/li>
&lt;li>crack it using tools like john the ripper&lt;/li>
&lt;/ul>
&lt;h2 id="steps">Steps&lt;/h2>
&lt;ol>
&lt;li>Create a live USB of Kali Linux&lt;/li>
&lt;li>Boot into this usb from the victim&amp;rsquo;s computer&lt;/li>
&lt;li>mount the root partition under /mnt&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>lsblk &lt;span style="color:#75715e"># shows connected drives&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mount /dev/sda2 /mnt &lt;span style="color:#75715e"># mount the drive in /mnt. You&amp;#39;ll have to change the sda name according to lsblk output&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Navigate to etc from /mnt and create hash out of shadow and password file using the &lt;code>unshadow&lt;/code> util of kali linux. Save this in the home directory&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>In linux, the passwords of all users are stored as a hash in a /etc/shadow file. The corresponding names can be taken from &lt;code>/etc/password&lt;/code> file&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo unshadow /etc/passwd /etc/shadow &amp;gt; ~/shadowhash &lt;span style="color:#75715e">#storing the unshadowed file in home directory&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>Crack this using tools like &lt;a href="https://www.openwall.com/john/">john-the-ripper&lt;/a>. Pass in a wordlist if the password may be complex.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>john --format&lt;span style="color:#f92672">=&lt;/span>crypt shadowhash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># or&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>john shadowhash --wordlist&lt;span style="color:#f92672">=&lt;/span>/usr/share/wordlists/rockyou.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This should give you the password in plain text format for the victim&amp;rsquo;s OS in 70% + cases.&lt;/p>
&lt;br>
Reboot the system and log in to the victim's OS with cracked password to gain full access to the system.
&lt;p>Note: This article focuses only on Linux machines. However, keep in mind that similar thing can be used for Windows systems as well.&lt;/p>
&lt;hr/>
&lt;p>P.S. It goes without saying that the purpose of the article is to show that we need to have a really complex password in our computers. Otherwise it can be cracked like above. Use proper long passwords containing both alphanumeric and special characters. Add a personal tinge something to the password as well so that it cannot be directly matched from a wordlist.&lt;/p>
&lt;p>The End&lt;/p></description></item><item><title>How to add SSL and make a server https</title><link>/posts/set-up-ssl/</link><pubDate>Sun, 25 Dec 2022 18:14:39 +0530</pubDate><guid>/posts/set-up-ssl/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>An easy way to set up Secure Socket Layer (SSL) on a web server without having necessary nginx installation. SSL is a security protocol that encrypts data sent between a client and a server, helping to protect against hacking and other online threats. By enabling SSL on your web server, you can ensure that sensitive data sent to and from your server is protected.&lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;p>To set up SSL on your server, you will need the following:&lt;/p>
&lt;ol>
&lt;li>A Linux machine on which you want to enable SSL.&lt;/li>
&lt;li>SSH access to the Linux machine.&lt;/li>
&lt;li>A web server that listens on a route for requests.&lt;/li>
&lt;li>DNS management access.&lt;/li>
&lt;/ol>
&lt;h2 id="steps-to-follow">Steps to follow&lt;/h2>
&lt;ol>
&lt;li>Install the certbot package on your machine. Certbot is a tool for interacting with Letsencrypt, a free, automated, and open certificate authority. You can install Certbot using the following command:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-get install certbot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Find the public IP address of your machine. You can get it from the cloud console of your cloud provider, or by running the following command:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl ipinfo.io/ip
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Go to the DNS manager and add a new DNS entry for the server domain for which you want to enable SSL. For example, if you want to add SSL for the domain &amp;lt;your.domain.tld&amp;gt;, you would add a DNS entry for the public IP address of your server.&lt;/li>
&lt;/ol>
&lt;p>4 a. Run Certbot to generate an SSL certificate for this domain using the command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo certbot certonly --standalone
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>4 b. If you&amp;rsquo;re having nginx already running, then use the following command instead:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo certbot --nginx --domain &amp;lt;your.domain.name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>
&lt;p>Follow the instructions provided by the Certbot wizard. At the end, you will have SSL certificate .pem files stored in the location /etc/letsencrypt/live/&amp;lt;your.url.entered&amp;gt;. Make note of this location, as you will need it later.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Start your web server and note down the port on which it is listening (e.g. 8080).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Add the path to the SSL certificate and private key generated earlier to your web server. The process for doing this will depend on the type of web server you are using.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>For example, if you are using a Node.js server, you can do it using the following code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">express&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;express&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">https&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;https&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">fs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;fs&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">app&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">express&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Read SSL certificate and private key
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">key&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">fs&lt;/span>.&lt;span style="color:#a6e22e">readFileSync&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/etc/letsencrypt/live/&amp;lt;your.domain.tld&amp;gt;/privkey.pem&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cert&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">fs&lt;/span>.&lt;span style="color:#a6e22e">readFileSync&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/etc/letsencrypt/live/&amp;lt;your.domain.tld&amp;gt;/cert.pem&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Define GET method in the root route
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>, (&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello, World!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Create HTTPS server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">https&lt;/span>.&lt;span style="color:#a6e22e">createServer&lt;/span>(&lt;span style="color:#a6e22e">options&lt;/span>, &lt;span style="color:#a6e22e">app&lt;/span>).&lt;span style="color:#a6e22e">listen&lt;/span>(&lt;span style="color:#ae81ff">443&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Server listening on port 443&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For nginx, you will have a server block having configuration similar to the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">443&lt;/span>; &lt;span style="color:#75715e"># listens for https requests
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">server_name&lt;/span> &lt;span style="color:#e6db74">&amp;lt;your.domain.tld&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ssl_certificate&lt;/span> &lt;span style="color:#e6db74">/etc/letsencrypt/live/&amp;lt;your.domain.tld&amp;gt;/fullchain.pem&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ssl_certificate_key&lt;/span> &lt;span style="color:#e6db74">/etc/letsencrypt/live/&amp;lt;your.domain.tld&amp;gt;/privkey.pem&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># serves the files mentioned here
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">location&lt;/span> &lt;span style="color:#e6db74">/&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">root&lt;/span> &lt;span style="color:#e6db74">/usr/share/nginx/html&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">index&lt;/span> &lt;span style="color:#e6db74">index.html&lt;/span> &lt;span style="color:#e6db74">index.htm&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There you go, by now you should have the web server listening to https request on port 443✨.&lt;/p>
&lt;p>To configure SSL for other types of web servers, such as Apache or even a Python/Flask server, you will need to consult the documentation for those servers.&lt;/p>
&lt;p>But essentially, the process is simple. Generate ssl certificate for a site that has a DNS entry pointing to the public IP address of your server and have this certificate be referenced in code of your web server.&lt;/p>
&lt;p>You can even write redirect rules which automatically forwards/redirects a request in http to https.&lt;/p>
&lt;p>Here&amp;rsquo;s a demo using nginx.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server_name&lt;/span> &lt;span style="color:#e6db74">&amp;lt;your.domain.tld&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># to redirect http requests automatically to https
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">return&lt;/span> &lt;span style="color:#ae81ff">301&lt;/span> &lt;span style="color:#e6db74">https://&lt;/span>$host$request_uri;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://letsencrypt.org/getting-started/">Letsencrypt Getting Started&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04">How To Set Up a Self-Signed SSL Certificate for Apache in Ubuntu 20.04&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://nginx.org/en/docs/http/configuring_https_servers.html">Nginx SSL Configuration&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://chat.openai.com/">Chat GPT&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Notes</title><link>/posts/notes/</link><pubDate>Mon, 12 Sep 2022 19:02:56 +0530</pubDate><guid>/posts/notes/</guid><description>&lt;ol>
&lt;li>
&lt;p>Reverting back git history from a commit:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git revert --no-commit 0766c053..HEAD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://stackoverflow.com/a/21718540/11879596">source: stackoverflow&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>getting the ipaddress quickly in most linux systems including termux:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ip a | grep inet
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Downloading protected pdfs from google drive and having them be searchable:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;a href="https://bytesbin.com/download-view-only-pdf-google-drive/">https://bytesbin.com/download-view-only-pdf-google-drive/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://askubuntu.com/a/474324">https://askubuntu.com/a/474324&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>How we hacked an entire computer lab✨</title><link>/posts/hacking-cs-lab/</link><pubDate>Tue, 26 Jul 2022 19:09:07 +0530</pubDate><guid>/posts/hacking-cs-lab/</guid><description>&lt;p>Linux is cool.&lt;/p>
&lt;p>Computer Networks is cool.&lt;/p>
&lt;p>Rick roll is cool.&lt;/p>
&lt;p>Our lab teacher - Titty sir, is definitely cool.&lt;/p>
&lt;p>So, hacking all the computers over there, should be cool too.?🙂&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Short write up of how I wrote a script to play rick roll in all computers in our lab. 🙂&lt;/p>
&lt;center>
&lt;video alt="demo of us rick-rolling" src="/videos/hackCSLab.mp4" controls muted poster="/thumbs/hackCSLab.jpg" >&lt;/video>
&lt;p class='caption'>In hindsight, should have added the --fullscreen flag to the browser as well!&lt;/p>
&lt;/center>
&lt;ol>
&lt;li>find your ip address using&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ip a | grep 192.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;center>
&lt;image src="/images/hackCsLab/ipGrep.jpg" alt="ip grep image">&lt;/image>
&lt;p class='caption'>
If the computer is connected to two or more networks(ethernet and wifi for example) the above would result in more than one entries.
Note that the address ending with 255 is for broadcast and hence should not be used.
&lt;/p>
&lt;/center>
&lt;ol start="2">
&lt;li>Get the list of all devices connected to your network using the &lt;strong>nmap&lt;/strong> tool&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo nmap -sn 192.168.143.0-255
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo nmap -sn 192.168.143.0-255 &amp;gt; ips.txt &lt;span style="color:#75715e"># to store output to a file&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Install &lt;a href="sshpass">sshpass&lt;/a> on your host machine&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt install sshpass
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>(i) Create simple bash script to ssh into one file and remotely execute a command&lt;/li>
&lt;/ol>
&lt;center>
&lt;image src="/images/hackCsLab/remoteExec.jpg" alt="Remote exec sample script">&lt;/image>
&lt;p class='caption'>
Simple script to remotely execute a command in a single client machine in network using sshpass.
&lt;/p>
&lt;/center>
&lt;ol start="4">
&lt;li>(ii) Create script to loop through the script and remotely execute a command.&lt;/li>
&lt;/ol>
&lt;center>
&lt;image src="/images/hackCsLab/loopIpScript.jpg" alt="sample script for looping over ips and executing a bash command">&lt;/image>
&lt;p class='caption'>
Simple script to loop over a set of ips and execute a bash command.
&lt;/p>
&lt;/center>
&lt;h2 id="afterthoughts">Afterthoughts&lt;/h2>
&lt;p>There you go. This script should let you run a command remotely in all the devices in your network.&lt;/p>
&lt;p>I used this only once for playing rickRoll in all the computers in our lab just as a proof of concept.&lt;/p>
&lt;p>Now, even though we demoed using a rick roll, just know that if one could do this much, really dangerous stuff can be done once access to these many computers are granted. Stuff can range from crypto-mining to running keyloggers for accessing passwords of students.&lt;/p>
&lt;p>This worked perfectly in our case because the passwords of all the computers were same. In little more stricter scenarios, the passwords being same are rare and hence you&amp;rsquo;d need to create separate files to map the ips to passwords before looping through.&lt;/p>
&lt;p>Finally, we were able to pull this off only because the staff in CS Lab were kind and understanding of the student&amp;rsquo;s curiosity and interest to explore stuff.✨&lt;/p>
&lt;p>I suppose I should mention that this is a powerful method and you should use it only with care respecting privacy of others in the network.🙂&lt;/p></description></item><item><title>I gave a talk at an international conference and Murphy's law sucks!</title><link>/posts/i-gave-a-talk/</link><pubDate>Tue, 26 Jul 2022 19:09:07 +0530</pubDate><guid>/posts/i-gave-a-talk/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>I got an opportunity to do a Flash-Talk for IndiaFoss conference held in Bangalore on 23-24 July 2022 and boy, &lt;a href="https://en.wikipedia.org/wiki/Murphy's_law">Murphy&amp;rsquo;s law&lt;/a> messed up my presentation!&lt;/p>
&lt;center>
&lt;image src="/images/indiaFoss/indiaFossTalk.jpg" alt="My talk at IndiaFoss"/>
&lt;p class='caption'>Excuse the 240p quality please!&lt;/p>
&lt;/center>
&lt;p>The topic of my talk was: &lt;strong>How to make sharing of digital assets as easy and accessible as possible.&lt;/strong>
It was based on &lt;a href="/projects/whatsapp-msg-without-save/">an app I had made earlier&lt;/a> to send messages by using the most common app in one&amp;rsquo;s phone - Whatsapp, without having to save anyone&amp;rsquo;s contact number.&lt;/p>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>I was inspired by a talk which I heard over at IndiaFoss from Akash Hamirwasia who made a web-app called &lt;a href="https://blaze.vercel.app/">Blaze&lt;/a> for sending files over the internet using a website.
His project was cool, but to me it seemed like the common man would find it a bit difficult. When I talk about the common man, I&amp;rsquo;m talking about they who doesn&amp;rsquo;t even know to open web browsers(Yes, I&amp;rsquo;ve seen people to whom when I asked to open browser, they have opened settings and searched &amp;ldquo;browser&amp;rdquo; in the settings searchbar. Just know that you are really privileged if you think such people don&amp;rsquo;t exist).&lt;/p>
&lt;p>Whatsapp is the app with which people are most comfortable. If only there was a way to send files through whatsapp without having to save the contact number&amp;hellip;&lt;/p>
&lt;p>Introducing my app which solves exactly this problem. It generates a wa.me link and opens it behind the scenes so as to trigger and open whatsapp chat of the person whose number has just been entered.&lt;/p>
&lt;h2 id="about-the-talk">About the talk&lt;/h2>
&lt;p>So being inspired by Mr.Akash, I submitted my presentation and was selected to speak. I had been using Arch Linux for a while now and recently got a new laptop, but I was unsure if it would be able to connect to the HDMI port for the presentation. I saw others with ThinkPads easily connecting their laptops and presenting, so I thought Linux&amp;rsquo;s plug and play support would have me covered. Unfortunately, I was mistaken.&lt;/p>
&lt;p>I was given slot number 8 out of the 9 available slots, but by the time it was my turn, the participants had taken up more time than allotted and the event was running behind schedule.&lt;/p>
&lt;h2 id="et-tu-arch">Et tu Arch..&lt;/h2>
&lt;p>My name got called, I went up and connected my laptop to HDMI cable only to find nothing being presented🥲.&lt;/p>
&lt;p>Apparently my faith in Arch linux may have been a bit too much because had I bothered to check the status during some break maybe I wouldn&amp;rsquo;t have to face the difficulty.(Well technically, I tried doing that but then another speaker beat me to it and took a long time that I had to leave.. still..).&lt;/p>
&lt;p>So here I was in front of the stage with my laptop not being able to present and the schedule already really late for me to get another&amp;rsquo;s laptop.&lt;/p>
&lt;p>Well, I started speaking. I didn&amp;rsquo;t want to take up more time and delay the program. So I talked about the problem, about my solution and about my app. I had this cool demo planned where I would call up someone from the audience and will send them a hi over Whatsapp without having to save their contact information, but couldn&amp;rsquo;t do it without being able to present. Still I talked and shared my idea. I had a bit.ly link which I asked everyone to enter to see a demo and url of github repo so that people could check out the project later as well.&lt;/p>
&lt;h2 id="afterwords">Afterwords&lt;/h2>
&lt;p>Right after I finished the talk and went to sit, a guy near me asked if I could make something similar for iOS as well to which I had to reply by saying that I&amp;rsquo;m not having a macBook at present to compile and build for iOS even though I used Flutter to build the project.&lt;/p>
&lt;p>Before I even left the hall, 3 people came near me and asked if I could build for iOS as well. I mean this is something magical about giving a talk I think. People know about your project and you get feedback instantly! I was happy to realize that the problem I solved was worthwhile and that many people found the solution good enough to be used!&lt;/p>
&lt;h3 id="final-thoughts">Final Thoughts&lt;/h3>
&lt;p>This was the first time I was speaking at such a large conference and it certainly gave a whole different feel. While I was sad that I couldn&amp;rsquo;t demo the presentation, I was happy that this would lead more people to benefit from my project.✨&lt;/p>
&lt;p>EDIT: Whatsapp recently introduced a click to chat feature recently which would replicate the functionality of my app. You just have to pasta an unsaved number to some chat and then click it again within whatsapp to take you to the whatsapp chat of that person.&lt;/p></description></item><item><title>Moodle Automation</title><link>/projects/moodle-automation/</link><pubDate>Wed, 19 Jan 2022 19:25:18 +0530</pubDate><guid>/projects/moodle-automation/</guid><description>&lt;p>Reflections on a nodeJS program I wrote to automate marking online attendance.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>I used to attend online classes. Sometimes I&amp;rsquo;ll be sleepy or the class may be really boring, but I always used to attend them given a choice. However, at times I used to forget marking the attendance.&lt;/p>
&lt;p>The attendance marking system in our college(and in many other Govt. colleges) for online classes was kinda ridiculous. We use the awesome &lt;a href="https://moodle.com/lms/">Moodle LMS&lt;/a> system for managing online classes.
The students have to go to the Moodle course page every hour and mark the attendance for that particular subject happening at that particular hour. That&amp;rsquo;s right, the students mark their own attendance irrespective of whether they actually attends any classes at all🤦. The funniness of this situation becomes even more evident when the student is presented with the following three options for marking attendance in the course page:
Present, Late or Absent.
Seriously.. will any absent or late student actually mark the same given an option?🤷&lt;/p>
&lt;!-- todo: add image here -->
&lt;p>Anyways.. I used to attend classes, but the attendance marking was very hard for me. I used to occasionally forget and sometimes by the time I&amp;rsquo;d have remembered about marking the attendance, the hour would&amp;rsquo;ve run out and the option would have been gone to mark it for that subject.&lt;/p>
&lt;p>It once reached a dangerous point where I had only 38% of attendance for DS subject in which I had actually missed only 2 classes which I think were due to some genuine reasons. This led me to find a solution which was foolproof.&lt;/p>
&lt;h2 id="thought-process">Thought Process&lt;/h2>
&lt;p>I thought about the flow a student takes to mark his attendance.&lt;/p>
&lt;ul>
&lt;li>He navigates to the course page&lt;/li>
&lt;li>He logs in to the moodle account by entering email and password. (yeah there are no persistent cookies in Moodle to preserve login state, atleast it&amp;rsquo;s not set up in the Moodle installation our college uses).&lt;/li>
&lt;li>He clicks the attendance anchor tag element to go to the attendance page.&lt;/li>
&lt;li>He selects the list item for the date which is having a field for marking attendance.&lt;/li>
&lt;li>Once clicked he is navigated to another page having the 3 options: Present, Absent, Late&lt;/li>
&lt;li>He selects the radio button for Present(obviously)&lt;/li>
&lt;li>He clicks the Submit button.&lt;/li>
&lt;li>He sighs at having marked his own attendance. The End&lt;/li>
&lt;/ul>
&lt;p>The fact that I could describe the steps this way meant that I could definitely ask a computer to do these for me ie. to automate the process. Now the question was how to implement a program which could log in on my behalf and mark the attendance by following the above steps. Additionally I also wanted a way to let me know once the attendance had been successfully marked or if the attendance marking failed for some reason as then I could go and mark the attendance manually.&lt;/p>
&lt;h2 id="building-the-automation-program">Building the automation program&lt;/h2>
&lt;p>I used the nodeJs &lt;a href="https://github.com/puppeteer/puppeteer/">puppeteer&lt;/a> library for browser automation.
I had once used it an year before for generating PDFs out of html. &lt;br/>
Anyways, I created a new nodeJs project, installed puppeteer and added my username and password as environment variables.
&lt;br>
I created a file wherein I could add the subjectLinks for which I wanted to automatically mark attendance. I also installed expressJs and created a web UI - something like a dashboard which could show me the stats for various subjects - whether they were marked, when is the next check etc.&lt;/p>
&lt;img src="/images/moodle-bot/dashboard.png" width=400 alt="Dashboard preview">
&lt;br/>
&lt;p>I tested the program a couple of times. Testing was a bit slow because there would be only one slot for me to test in one hour when there is an actual attendance open to automate.&lt;/p>
&lt;p>Afterwards I installed the awesome &lt;a href="https://github.com/yagop/node-telegram-bot-api">node-telegram-bot-api&lt;/a> library for getting notifications through Telegram and also added some control commands as well.
Anyways, within a few days, I had ironed out the bugs(most of them that is) and had the code working fine. Now the question was regarding hosting the server.&lt;/p>
&lt;p>Running a web server is costly(atleast for a student that is). The only option I had was to use an AWS ec2 instance. In the initial code I wrote, I used the node-cron library to set a cron job which automatically executes the scraping program every 30 minutes from morning to evening every day and checks if any of my subject links have got an open attendance to mark. This worked fine.. but the problem was that this would mean my server would have to be continuously running to have the program be executed at the right time.
This was not acceptable.&lt;/p>
&lt;p>So I started looking for alternate solutions, and came upon this wonderful &lt;a href="https://cron-job.org/en/">site&lt;/a>🤩.My new approach didn&amp;rsquo;t have the cron script in my code. I had an API endpoint which will be called by the cron-job site every 30 minutes from morning to evening. I hosted by code in Heroku and gave the api endpoint url to the cron-job site to ping. Heroku has some serious limitations for free apps which prevents them to be up more than 21 days etc. With my new approach however this was not at all a problem as now my server will be active exactly only when the cron site executes ie. it&amp;rsquo;ll be active only when it is time to mark the attendance. No extra wasted awake time.&lt;/p>
&lt;p>I hosted the project, and I have to say by the end of semester I had more than 75% of attendance for all subjects. Mind you that I actually did attend all the online classes myself, just that I didn&amp;rsquo;t have to do the boring process of opening Moodle and marking the attendance manually.&lt;/p>
&lt;img src="/images/moodle-bot/bot.png" width=400 alt="bot preview">
&lt;br/>
&lt;h2 id="afterthoughts">Afterthoughts&lt;/h2>
&lt;p>One doubt I initially had was if this was a good project from an ethical standpoint and whether my code could be used by others for getting attendance without coming to class. Since I was conflicted on this, for over one year, I didn&amp;rsquo;t tell to anyone about this project and kept the code in a private Github repo. However it was only a matter of time before I saw that students were just tired of this stupid process of manually going to moodle and marking their own attendance. I saw over 4 other automation projects for marking attendance, ie students were trying to find a way to get around the broken system;&lt;/p>
&lt;p>Me keeping my project closed because I was afraid of my code being misused didn&amp;rsquo;t really matter much, people were always looking for a workaround and it was only a matter of time before they follow similar paths that you took.&lt;/p>
&lt;p>That being said, each time I saw another attendance automation project, I couldn&amp;rsquo;t just think that my version of automation was actually kinda good. You didn&amp;rsquo;t even have to enter any timetable, just the attendance page urls would suffice. I saw projects for which you have to enter time-tables which was a problem because sometimes time tables may change or a different teacher may take class on a different subject if one teacher is on leave etc. Other automation projects I sad didn&amp;rsquo;t have a notification system as well, they were all python programs written to be run in the terminal. I was kinda happy though that I wasn&amp;rsquo;t the only one fed up of this system, but this also made me wonder if using your skills to get around a broken system is actually wrong..&lt;/p>
&lt;p>I open sourced the project after 14 months of the initial commit. Within that period I have seen good people losing attendance(and hence their marks due to the minimum 75% attendance scheme in Kerala colleges) because they had forgotten to mark in Moodle often times when they had attended the actual classes as well. I open sourced my code without any flashy announcements in the firm belief that if one is genuinely looking for a solution, he should find it. As the Bible says, &amp;ldquo;Seek and You will Find&amp;rdquo;.&lt;/p>
&lt;p>Check out the code &lt;a href="https://github.com/aldrinjenson/moodle-automation">here&lt;/a> :).&lt;/p></description></item><item><title>Query Search Bot</title><link>/projects/query-search-bot/</link><pubDate>Sun, 24 Oct 2021 19:25:18 +0530</pubDate><guid>/projects/query-search-bot/</guid><description>&lt;p>I started my experiments with Telegram Bots in the November of 2020 when I wanted an easy way to receive notifications.
Discord was the first option, but it was just too cumbersome for the simple purpose of receiving notifications. Telegram was much more convenient and easy to use. I used and built various Telegram bots of different complexities during my tenure at TGH Tech. I also used it for my &lt;a href="/projects/moodle-automation">Moodle Automation&lt;/a> program as well.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>This is one of my first major Telegram bot and was first made to get myself familiar with the functions offered by the &lt;a href="https://github.com/yagop/node-telegram-bot-api">node-telegram-bot-api&lt;/a> library. The idea is simple - make Internet queries without leaving telegram.&lt;/p>
&lt;h2 id="the-flow">The flow&lt;/h2>
&lt;p>The steps involved are as follows:&lt;/p>
&lt;ul>
&lt;li>The user adds the bot to a group&lt;/li>
&lt;li>He uses a command to trigger the bot&lt;/li>
&lt;li>He sends the bot a query to search&lt;/li>
&lt;li>The bot sends the top search results of that particular query.&lt;/li>
&lt;li>END&lt;/li>
&lt;/ul>
&lt;h2 id="implementation">Implementation&lt;/h2>
&lt;p>Searching part is basically web-scraping. While google doesn&amp;rsquo;t provide a free api to search, there are some alternative implementation like &lt;a href="https://github.com/jarun/googler">googlr&lt;/a>. I tried to use these alternatives, but they either works only in the cli or were just too cumbersome to use.
&lt;br/>
With Google unavailable, I started looking for alternatives, which lead me to my answer -&amp;gt; Bing api. Initially I was a bit skeptical about using bing search engine, but turns out it&amp;rsquo;s the second most popular search engine after Google even though there&amp;rsquo;s a large market share gap.
I found that the results for search queries were quite reasonable as well.
&lt;br/>
So with bing fixed, I used the &lt;a href="https://www.npmjs.com/package/bing-scraper">bing-scraper&lt;/a> npm package for my query searching.&lt;/p>
&lt;hr/>
&lt;p>The logic was quite simple actually. Whenever the user sends a search query to the bot, in the backend, the bot uses the above library to scrape bing and find the top results which are then sent as response messages back to the user.&lt;/p>
&lt;p>Since this was a small project, I didn&amp;rsquo;t want to host it on a server as usual. Heroku was the first option I thought about. However, due to Heroku&amp;rsquo;s free tier limitations, once the server entered a sleep state, it needs an external HTTP request to wake it up. The telegram bot I set up was using constant polling mechanism to listen for requests, which meant that the telegram triggers won&amp;rsquo;t wake up the Heroku server.&lt;/p>
&lt;p>I initially tried to create a simple API endpoint from the server, and then constantly pinging it at regular intervals to prevent the server from going to sleep. However even this wasn&amp;rsquo;t sustainable as Heroku free tier has this limitation that your server cannot be active for more than 500 hours per month. Bummer.&lt;/p>
&lt;p>So as usual, I started looking for other options to get free hosting. I had an AWS account. I didn&amp;rsquo;t want to use and ec2 for this small project. But there were &lt;a href="https://aws.amazon.com/lambda">Lambdas&lt;/a> available. I didn&amp;rsquo;t have much experiences with serverless computing before, but this seemed like a good opportunity to try them out. AWS Lambda offers 1 million free requests per month, which seemed more than plenty for my use case😇.&lt;/p>
&lt;h2 id="implementing-lambda-functions">Implementing Lambda functions&lt;/h2>
&lt;p>Implementing lambda functions can be made very easy using the &lt;a href="https://www.serverless.com/">serverless framework&lt;/a>.
It was very confusing for me initially on the product&amp;rsquo;s name - Serverless, the same name as the serverless architecture. 🤷 I&amp;rsquo;ll refer to the Serverless platform with a capital S.
The process involved the following steps:&lt;/p>
&lt;ul>
&lt;li>You install Serverless cli and generates the serverless boilerplate for nodeJs(other languages also available)&lt;/li>
&lt;li>You create a Serverless account and login to your dashboard&lt;/li>
&lt;li>You connect your cloud provider(AWS Lambda in my case) to Serverless&lt;/li>
&lt;li>You push your code to a github repo and connect it to the Serverless platform. (optional)&lt;/li>
&lt;li>You enter the command &lt;code>sls deploy&lt;/code> in your code directory to deploy the code to the connected cloud provider.&lt;/li>
&lt;li>END&lt;/li>
&lt;/ul>
&lt;p>Now there was one change I had to make for the bot to work with serverless. Since serverless functions will be active only once a request has been received, my initial approach of using long polling(default approach in the node-telegram-bot-api library as well) to query for updates won&amp;rsquo;t work. So I used webhook approach to fix this issue. Basically once the user sends a message to the bot, it reaches the Telegram servers first, and then from there it calls the deployed serverless url wherein I have a switch statement that fires functions depending on the message content/command. &lt;a href="https://github.com/aldrinjenson/tg-querySearchBot/blob/d5260c7672909f07ca664bb075369f4bfbe0b5cd/index.js#L50">Here&amp;rsquo;s&lt;/a> the actual code implementation.
Check out the &lt;a href="https://github.com/aldrinjenson/tg-querySearchBot/blob/main/README.md">ReadMe file&lt;/a> as well where I&amp;rsquo;ve added some instructions on the process of setting up webhooks for telegram bots.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Once the serverless flow was understood, then building and deploying the bot was not that difficult. I had used this same bot as an example to explain the concept of building and deploying bots to many others. Overall even thought the project was kinda small in code or logic, it contained many learnings and people other than me were able to benefit out of this project. So Lesson learned, it&amp;rsquo;s better almost always to learn something by building rather than just by simply watching a Youtube tutorial without applying the concepts.&lt;/p>
&lt;p>This bot was actually the base of many other complex Telegram bots I made. By the end of 2 months in TGH Tech, I was pretty well-versed in the node-telegram-bot-api library and had even written several utility functions to make a lot of tasks much, much easier. It was my wish to group them together and publish them as a library so that many other who faced similar problems could use it. Sadly though, I got busy afterwards with other projects and by the time I was free, I had lost all touch with bots and I had this feeling that even if I had published them as a library, I may not be able to fix any issues people may raise or even test PRs because I won&amp;rsquo;t be working with any Telegram bots at all. Now though, while writing about this, I&amp;rsquo;m having different thoughts.. may be I think even if I won&amp;rsquo;t be feeling any motivation to fix these, the code could be useful to many people and maybe someone could fork it and work on it to improve.. The chances of bugs are pretty low as well, because several bots are running in production level at TGH tech using the utility functions I wrote.. so hmm, let me see, I&amp;rsquo;ll update it here if I&amp;rsquo;m publishing the library🤞.&lt;/p>
&lt;p>Check out the project &lt;a href="https://github.com/aldrinjenson/tg-querySearchBot">here&lt;/a>.
&lt;br/>
Live Demo at &lt;a href="https://t.me/querySearchBot">querySearchBot&lt;/a>.&lt;/p></description></item><item><title>How to host a Hugo static site using Github pages</title><link>/posts/hosting-hugo-sites-on-gh-pages/</link><pubDate>Thu, 21 Oct 2021 00:20:33 +0530</pubDate><guid>/posts/hosting-hugo-sites-on-gh-pages/</guid><description>&lt;p>It took me a day to fix a bug related to hosting a Hugo blog on github pages. Thought I&amp;rsquo;d compile down my learnings here.&lt;/p>
&lt;p>Check out these two links to get started with the local installation and setting up of the development environment. This part is quite easy.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://opensource.com/article/18/3/start-blog-30-minutes-hugo?utm_source=nomedium&amp;amp;utm_medium=web&amp;amp;utm_campaign=nomedium">Start a blog in 30 minutes with Hugo&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gohugo.io/getting-started/quick-start/">Official Hugo Quick Start Guide&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>By now you should be having a blog with atleast one post which can be previewed locally using &lt;code>hugo server -D&lt;/code> command.&lt;/p>
&lt;p>Now, the part which I found difficult is to host this site and make it available for the public. While there are guides available on the official docs for a lot of hosting options, the one for hosting with github pages isn&amp;rsquo;t very helpful (general opinion of a lot of developers).&lt;/p>
&lt;p>Anyways, here are the simple gotchas you need to take note of for easy hosting after following the official guide.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The baseUrl in your config file should point to the url where which your site will be deployed. (Usually, &lt;code>yourusername.github.io/&lt;/code>). No need to change it to rawgithubUserContent link if images or css doesn&amp;rsquo;t load initially.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If images are not being displayed on your site, add on &lt;code>canonifyURLs: true&lt;/code> in your &lt;code>config.yaml&lt;/code> file or the toml version in your &lt;code>config.toml&lt;/code> file if you are using toml.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When using the &lt;a href="https://github.com/peaceiris/actions-gh-pages">gh-pages&lt;/a> github action as mentioned in the docs for deploying with Github, it&amp;rsquo;s basically creating a new branch called gh-pages and then putting in the build files (from the public folder) in this branch and this is the one that is getting deployed in github pages. Basically, your source code is in the main branch, and the build output is in the gh-pages branch. (Not knowing this can confuse you in understanding how the magic happens ). The static HTML pages in this branch are deployed using github pages.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you want to host your site in a custom domain, then you got to create a file &lt;code>CNAME&lt;/code> and put it in the hugo static folder. This file should contain just the domain name eg: &lt;code>www.example.com&lt;/code>. This file from static folder will be put in the root folder of gh-pages branch once the site has been built by the gh action on push. If you get some errors regarding the domain, check out &lt;a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/troubleshooting-custom-domains-and-github-pages#cname-errors">this part&lt;/a> of the official docs.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>So there you go, these are the three simple points which you need to take note of so as to make the whole deployment process with hugo a bit easier. Now you can write blog posts and the site gets deployed once you push to the main branch.&lt;/p>
&lt;p>P.S. Just so you know, this current site you are looking at has been made completely using Hugo by following the above steps. So yeah, this works. You can check out the source code for this site &lt;a href="https://github.com/aldrinjenson/aldrinjenson.github.io">here&lt;/a> if interested.&lt;/p>
&lt;h2 id="pro-tip">Pro Tip:&lt;/h2>
&lt;p>If you want to make your life a bit easier, add the following alias script to your bash or zsh shell to start up the dev server and open up your browser quickly to the localhost hugo dev URL.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> alias hs&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;firefox --new-tab http://localhost:1313/ &amp;amp; hugo server -D&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above works for most modern browsers and hence you can replace firefox with the browser of your choice. So next time you want to write a new blog, fire up your editor and simply enter the &lt;code>hs&lt;/code> command in your blog directory to start up hugo dev server and have your browser navigate to the hugo dev port.&lt;/p></description></item><item><title>How to Speed up your programming workflow by adding auto-correct in git</title><link>/posts/git-autocorrect/</link><pubDate>Sun, 01 Nov 2020 17:07:10 +0530</pubDate><guid>/posts/git-autocorrect/</guid><description>&lt;p>In this short post I would like to share a neat trick I learned which you can use to speed up your development workflow - adding auto-correct to git.&lt;/p>
&lt;h2 id="current-scenario">Current Scenario&lt;/h2>
&lt;p>Currently, if you have a typo or some small error in your git command, git will automatically suggest the most plausible command corresponding to your keyboard input.
Majority of the time this suggested command is bound to be the one you were trying to use. However, just suggesting the command is not that helpful since the programmer still has to navigate around and change the typo.&lt;/p>
&lt;br/>
&lt;p>&lt;img src="/images/git-autocorrect/image1.png" alt="image1">&lt;/p>
&lt;p align = "center">
Before setting up auto-correct
&lt;/p>
&lt;br/>
&lt;p>According to the official git &lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#_code_help_autocorrect_code">docs&lt;/a>,&lt;/p>
&lt;blockquote>
&lt;p>Git helpfully tries to figure out what you meant, but it still refuses to do it. If you set help.autocorrect to 1, Git will actually run this command for you&lt;/p>
&lt;/blockquote>
&lt;h2 id="solution">Solution:&lt;/h2>
&lt;p>Just open your terminal and add the following line&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git config --global help.autocorrect &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Adding the above command in your terminal results in the following :&lt;/p>
&lt;p>&lt;img src="/images/git-autocorrect/image2.png" alt="image2">&lt;/p>
&lt;p align = "center">
With auto-correct turned on
&lt;/p>
&lt;br/>
&lt;p>See, git gave us a warning saying that there is a typo in our command and then executed the most matching/similar command.&lt;/p>
&lt;p>Now, here the value which we assigned at the end has to be an integer which represents the tenths of a second after which your command will be executed.&lt;/p>
&lt;h2 id="preventing-accidental-commands">Preventing accidental commands&lt;/h2>
&lt;p>If you are worried about git accidentally executing a command which is similar to your input but is not what you actually wanted to run, then you can add a few seconds of extra time before which the command will be executed, so that you can cancel out the execution if needed.&lt;/p>
&lt;p>This can be achieved by changing the final integer value at the end to a multiple of 10 (say 20 or 30 which corresponds to 2 or 3 seconds respectively).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git config --global help.autocorrect &lt;span style="color:#ae81ff">30&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Adding the above code in your terminal gives the following output when you have another typo in your code.&lt;/p>
&lt;p>&lt;img src="/images/git-autocorrect/image3.png" alt="image3">&lt;/p>
&lt;p align = "center">
Executing a git command after 3 seconds
&lt;/p>
&lt;br/>
&lt;p>The actual command will be executed only after 3 seconds; which means that you can cancel the execution anytime within three seconds by just pressing &lt;strong>ctrl-c&lt;/strong>.&lt;/p>
&lt;h2 id="disabling-auto-correct">Disabling auto-correct:&lt;/h2>
&lt;p>If for some reason, you want to disable autocorrect feature (though I can’t really imagine why), all you need is to set the final integer to 0.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git config --global help.autocorrect &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will revert back the config settings to the default stage – to how it was before we modified it.&lt;/p>
&lt;p>&lt;img src="/images/git-autocorrect/image4.png" alt="image4">&lt;/p>
&lt;p align = "center">
Just like how it was before
&lt;/p>
&lt;br/>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>I have been using this cool autocorrect feature of git for some years now and it&amp;rsquo;s really a cool time saver. The small few micro seconds it saves by preventing us from not pressing the up arrow and then navigating around to fix typos in our command, can get compounded and become a huge time saver in the long run.&lt;/p>
&lt;h3 id="references">References:&lt;/h3>
&lt;p>&lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration">Here&lt;/a> is the official git docs in case you have further doubts.&lt;/p>
&lt;p>P.S. Other than the auto-correct, git has got some other cool features as well. Be sure to check them out too while you are at it :).&lt;/p>
&lt;p>&lt;img src="/images/bg/bg1.jpg" alt="background image">&lt;/p>
&lt;p>Have a good day!&lt;/p></description></item><item><title>Easiest way to add a splash screen in a React Native App</title><link>/posts/add-splash-screen-in-react-native-app/</link><pubDate>Wed, 24 Jun 2020 00:58:27 +0530</pubDate><guid>/posts/add-splash-screen-in-react-native-app/</guid><description>&lt;blockquote>
&lt;p>Note: This article was initially written in &lt;a href="https://medium.com/swlh/the-easiest-way-to-add-a-splash-screen-to-your-react-native-app-2d36bee3117b">Medium&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Hi, this article is a result of me spending a hell lot of time to figure out the best and easiest way to solve the above problem of adding a splash screen to a React-native app. Almost all the tutorials available as of when this post is being written (2020 June) have at least some part of the code outdated and so if you are lazy and tries to copy-paste all the code mentioned in them, your gradle config will break some way or the other and its total frustration.&lt;/p>
&lt;blockquote>
&lt;p>Note: If you are building your app using the awesome expo-cli, then you don’t need to go through the below tutorial, adding a splash screen to an expo app is as simple as replacing the default splash image in assets folder with your own custom image and then renaming it as ‘splash.png’.&lt;/p>
&lt;/blockquote>
&lt;p>Now, for those of us who have built the app with the good-old react-native init, adding a splash screen consists of the following 4 steps:&lt;/p>
&lt;h2 id="step-0-get-the-splash-image-ready">Step 0: Get the splash image ready!&lt;/h2>
&lt;p>I know, this is a no-brainier. But hey, do you exactly have the splash image in 6 different dimensions? No? Well guess what, you actually do need the same image in 6 dimensions! So how will you manage to make-do with just one image if that’s all what you got?&lt;/p>
&lt;p>Don’t bother going to Photoshop and resizing, here’s an awesome tool I found to make the process of splash image generation a piece of cake.&lt;/p>
&lt;p>Just go to &lt;a href="https://apetools.webprofusion.com/#/tools/imagegorilla">this&lt;/a> site, add your one splash image(preferably with the highest quality), choose the required platform(andoid and/or ios) and punch the Kapow button). The tool will generate a zip file of the splash screen in various different pixel dimensions.&lt;/p>
&lt;p>Extract it and copy all the contents in the android and/or ios folder from the bundle to your android/app/src/main/res folder.&lt;/p>
&lt;h2 id="step-1-install-the-super-cool-npm-package-react-native-splash-screen">Step 1: Install the super cool npm package: react-native-splash-screen&lt;/h2>
&lt;p>This will make the whole process dead simple&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm i react-native-splash-screen
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or using yarn,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>yarn add react-native-splash-screen
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Note: if your react-native cli version is below 0.6, don’t forget to link the above package using: &lt;code>react-native link react-native-splash-screen&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h2 id="step-2-configuration">Step 2: Configuration&lt;/h2>
&lt;h3 id="android">Android:&lt;/h3>
&lt;p>You have got to update the MainActivity.java file (located at &lt;code>android/app/src/main/java/com/your_project_name&lt;/code> folder) in order to use react-native-splash-screen in your project. Just make changes to the file like given below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> android.os.Bundle&lt;span style="color:#f92672">;&lt;/span>&lt;span style="color:#f92672">import&lt;/span> com.facebook.react.ReactActivity&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.devio.rn.splashscreen.SplashScreen&lt;span style="color:#f92672">;&lt;/span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MainActivity&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> ReactActivity &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span> &lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">onCreate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Bundle savedInstanceState&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SplashScreen&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">show&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">super&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">onCreate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>savedInstanceState&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ...other code
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, create a file called &lt;code>launch_screen.xml&lt;/code> in &lt;code>app/src/main/res/layout&lt;/code> (create the layout folder if it doesn&amp;rsquo;t exist). The contents of the file should be the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;RelativeLayout&lt;/span> &lt;span style="color:#a6e22e">xmlns:android=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">android:orientation=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;vertical&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">android:layout_width=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;match_parent&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">android:layout_height=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;match_parent&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ImageView&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">android:layout_width=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;match_parent&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">android:layout_height=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;match_parent&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">android:src=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;@drawable/screen&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">android:scaleType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;centerCrop&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/RelativeLayout&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we have got to add a color called primary_dark in app/src/main/res/values/colors.xml(create if it doesn&amp;rsquo;t exist already)by pasting in the following code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;resources&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;color&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;primary_dark&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>#000000&lt;span style="color:#f92672">&amp;lt;/color&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/resources&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ios">iOS:&lt;/h3>
&lt;p>Update AppDelegate.m (located at ios/splashapp) with the following additions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>#&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;AppDelegate.h&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#&lt;span style="color:#66d9ef">import&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">React&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">RCTBundleURLProvider&lt;/span>.&lt;span style="color:#a6e22e">h&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#&lt;span style="color:#66d9ef">import&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">React&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">RCTRootView&lt;/span>.&lt;span style="color:#a6e22e">h&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;RNSplashScreen.h&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>@implementation AppDelegate&lt;span style="color:#f92672">-&lt;/span> (BOOL)application:(UIApplication &lt;span style="color:#66d9ef">_&lt;/span>)application didFinishLaunchingWithOptions:(NSDictionary &lt;span style="color:#66d9ef">_&lt;/span>)launchOptions{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...other code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [RNSplashScreen show]; &lt;span style="color:#75715e">// or//[RNSplashScreen showSplash:@&amp;#34;LaunchScreen&amp;#34; inRootView:rootView];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> YES;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }@end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="step-3-hiding-the-splash-and-loading-your-main-screen">Step 3: Hiding the splash and loading your main-screen&lt;/h2>
&lt;p>By now, if you run your app, you would be able to see the splash image cover the entire screen(like it should) and showing forever(like it shouldn’t). Basically it would never close, and there is even a chance of your app crashing after a few seconds of the image showing like this.&lt;/p>
&lt;p>Now, when should the splash screen be closed? Maybe when the main entry file of your app is executed? Yes! So let’s just modify App.js so that exactly when the project files would finish loading and is ready to be executed, the splash screen would give way to your main/primary screen.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// make following changes to App.js
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">SplashScreen&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;react-native-splash-screen&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">App&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Component&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">componentDidMount&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// do stuff while splash screen is shown
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// After having done stuff (such as async tasks) hide the splash screen
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">SplashScreen&lt;/span>.&lt;span style="color:#a6e22e">hide&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In case you are using functional components, just call SplashScreen.hide() inside a &lt;code>useEffect&lt;/code> hook with an empty dependency array.&lt;/p>
&lt;hr>
&lt;p>And, there you go my friends, that’s all there is to it.&lt;/p>
&lt;p>I have tested the above in android and it works perfectly. Inability of having Apple device have prevented me from verifying it on iOS, but hopefully this should all work fine. If the above solution for some reason didn’t work for you, or if you want to add some advanced effects in your splash screen like customizing the color of the status bar when loading etc, here are the references I used. However, do keep in mind that all software related guides(including this one) tend to get outdated as new features get added to the various packages used and some breaking change occurs. That being said, all the best to your project. Cheers ✨&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/handlebar-labs/how-to-add-a-splash-screen-to-a-react-native-app-ios-and-android-30a3cec835ae">https://medium.com/handlebar-labs/how-to-add-a-splash-screen-to-a-react-native-app-ios-and-android-30a3cec835ae&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.npmjs.com/package/react-native-splash-screen">https://www.npmjs.com/package/react-native-splash-screen&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.netguru.com/blog/react-native-splash-screen">https://www.netguru.com/blog/react-native-splash-screen&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Love Match Calculator</title><link>/projects/love-calculator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/love-calculator/</guid><description>&lt;p>Before reading any further, visit this &lt;a href="https://aldrinjenson.github.io/Love-Calc/">link&lt;/a> and follow the instructions.&lt;/p>
&lt;hr>
Seriously dude, only continue if you visited the page and followed the instructions.
&lt;p>This project was inspired by an article written by Subin Siby of Vidhya Institue of Sciences where he mentioned about how we once got pranked by a similar site.
I haven&amp;rsquo;t talked to him directly other than in an online meet when he answered a question I asked in chat, but I&amp;rsquo;ve heard he&amp;rsquo;s a cool dude interested in building cool software. (Wish I could talk to him directly for once🤞).&lt;/p>
&lt;p>Anyways, On April 1st 2020, I decided to build something since it&amp;rsquo;s April Fool&amp;rsquo;s and all. During those days, some of us in class had created a Whatsapp group for those interested in programming, where we shared different articles, tutorials etc for everyone to pick up and improve. In that group, began a conversation which somehow ended on the topic of compatibility between partners(I know, just the usual typical topic discussed in a programming group.😁). Anyway, I saw this message in the morning and this got me thinking. Since it was April Fool&amp;rsquo;s day, I definitely wanted to do something fun; plus around that time, I had gotten myself pretty familiar with the awesome CSS framework &lt;a href="https://materializecss.com/">Materialize-CSS&lt;/a> and I wanted to build something cool with it as well.
So with all these reasons, I decided to build a Love compatibility calculator(Not an actual one ofc.)&lt;/p>
&lt;h2 id="the-idea">The Idea&lt;/h2>
&lt;p>The idea was simple - prank folks by asking them to enter the details of their crush for finding the percentage of love compatibility between them. What&amp;rsquo;s the prank in this you ask? Well, once they details are submitted, instead of the data gets stored in a db and instead of a percentage value, the users get &lt;a href="https://en.wikipedia.org/wiki/Rickrolling">Rick Rolled&lt;/a>😇.&lt;/p>
&lt;h2 id="implementation">Implementation&lt;/h2>
&lt;p>The project was built fairly quickly. I started working on it in the afternoon and by evening the whole project was pretty much completed.
The site was built using just HTML, Materialize-CSS and vanilla Javascript.
I used firebase as the database since it was super quick to set up.&lt;/p>
&lt;p>Basically once the user filled the form with details, a POST request is made and a new record is created in the firebase DB.
The coding part was hence fairly easy. I added some GIFs and Mr.Been Youtube video as well.
Sadly though, I wasn&amp;rsquo;t able to figure out how to autoplay Youtube videos in HTML at that time.&lt;/p>
&lt;h2 id="aftermath">Aftermath&lt;/h2>
&lt;p>I hosted the site using Netlify and put the link in the above mentioned Whatsapp group.
Well, a lot of people tried it out and quite a good number of people entered the names of their actual crush. When they found out at the end that it was a prank, well some took the joke lightly while others it seemed were quite anxious🙈.&lt;/p>
&lt;p>I was actually very excited about this nice joke and had sent the link to 2 seniors from my college as well without much thinking. One chechi(elder sister) who was 3 years senior to me, sent me just one message after a while: &lt;code>&amp;quot;Why?&amp;quot;&lt;/code>&lt;/p>
&lt;p>All the excitement and pride of having built something cool suddenly drained out of me. I didn&amp;rsquo;t know how to reply. After a while I took down the site, cleared the database and apologized. She was cool about my innocent joke though, as she later told me that she had a hunch about this being some sort of phishing website, so it was cool and all. But I was very much shaken. At that time, I didn&amp;rsquo;t even know about the concept of phishing. On that day, I suddenly became very much aware of powers a programmer or a tech person holds. It&amp;rsquo;s easy to trick people with innocent looking sites and apps. as much cliché as it may sound, with great power, comes great responsibility. It is not that difficult even for a single person to create a make believe site and ask people to enter sensitive information in the promise of some great reward. The collected information could then be used to blackmail the user and collect money or whatever.&lt;/p>
&lt;p>This project hence, even though was a small one(only a few hours worth of work), it was an important one in my programming life. I realized that whatever you create could technically be used with a wrong intention as well which could result in major loss and sadness for people.&lt;/p>
&lt;p>The main site was took down, and I had removed the firebase Db connections. What you might have already seen contains just the UI. So no data is sent to anyone in case you actually entered any sensitive information when you visited the above site. But of-course, you were smart and you didn&amp;rsquo;t enter any actual details right?🌝&lt;/p>
&lt;p>Check out the project code &lt;a href="https://github.com/aldrinjenson/Love-Calc">here&lt;/a>!&lt;/p></description></item><item><title>Sending Whatsapp messages without saving contact</title><link>/projects/whatsapp-msg-without-save/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/whatsapp-msg-without-save/</guid><description>&lt;h3 id="abstract">Abstract&lt;/h3>
&lt;p>An app I made to ensure that you can share links and files really easily to anyone without having to save the contact number of that person by using the already existing most famous digital medium of communication - Whatsapp.&lt;/p>
&lt;p>Get the code and APK from this &lt;a href="https://github.com/aldrinjenson/send-whatsapp-msg-without-save">link&lt;/a>.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>I had to learn flutter for a mini-project in my college. I wanted to build something to try out and this is regarding a very simple Flutter app I made which I believe solves a great problem in the lives of the common people.&lt;/p>
&lt;h1 id="the-problem">The Problem&lt;/h1>
&lt;p>For a common person, the most familiar app in their phone is Whatsapp. All the controls for texting and sending files are so familiar to them. When they see someone new and have to send something to them, what they usually do is to save the contact number and then searches whatsapp to locate their chat and send the file or link.
This is cool and all, but why save someone&amp;rsquo;s contact if it&amp;rsquo; going to be a one time file sharing..&lt;/p>
&lt;p>I&amp;rsquo;ve faced this dilemma before as well when I&amp;rsquo;m part of the organizing team for some event and often times we may have to message the participants regarding some important announcement or even Google Meet links. E-mails cannot be relied upon for short term reminders while Whatsapp messages would be an excellent way.&lt;/p>
&lt;p>If only there was some way to send messages and files through whatsapp without having to save contact&amp;hellip;.&lt;/p>
&lt;h2 id="the-solution">The Solution&lt;/h2>
&lt;p>Whatsapp have this public api which can be used to open the Whatsapp chat of a user by passing in the mobile number as parameter.&lt;/p>
&lt;p>It&amp;rsquo;s of this form:&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://api.whatsapp.com/send">https://api.whatsapp.com/send&lt;/a>?&amp;lt;mobile-number&amp;gt;&lt;/p>
&lt;/blockquote>
&lt;p>This is nice if you&amp;rsquo;re a techie as this is way better than actually having to save a contact number. However, it&amp;rsquo;s still clumsy as you&amp;rsquo;d have to enter this long URL each time you want to text someone on Whatsapp. Aha, I know what you&amp;rsquo;re thinking, what if me pass this to a url shortener like bit.ly&amp;hellip; Well, you&amp;rsquo;re right, an even easier way would be to have the url of the form:&lt;/p>
&lt;blockquote>
&lt;p>wa.me/&amp;lt;mobile-number&amp;gt;&lt;/p>
&lt;/blockquote>
&lt;p>I&amp;rsquo;ve been using this above URL method for months and it works flawlessly.&lt;/p>
&lt;h2 id="even-better-solution">Even better solution&lt;/h2>
&lt;p>Now, what if there was one app which could automate this even further so that even very common man could use this without having to use a browser to enter a URL each time!&lt;/p>
&lt;p>Well, that&amp;rsquo;s exactly what I made: An app which behind the scenes, calls the above link with a mobile number accepted as parameter.&lt;/p>
&lt;p>Here&amp;rsquo;s a demo:&lt;/p>
&lt;img src="/images/wa_msg_without_save_demo.gif" width=400 alt="demo workflow gif">
&lt;br/>
&lt;h2 id="code-and-implementation">Code and implementation&lt;/h2>
&lt;p>The code is written in Flutter because the main reason for the starting of this project was for me to try out Flutter.&lt;/p>
&lt;p>Right now, it&amp;rsquo;s built only for Android as I don&amp;rsquo;t have access to a Macbook.&lt;/p>
&lt;p>The implementation part is very simple with just one class and one dart file.&lt;/p>
&lt;p>The code can be found in this Github repo: &lt;a href="https://github.com/aldrinjenson/send-whatsapp-msg-without-save">aldrinjenson/send-whatsapp-msg-without-save&lt;/a>&lt;/p>
&lt;h2 id="conclusion-and-afterthoughts">Conclusion and afterthoughts&lt;/h2>
&lt;p>Most of my projects so far which a lot of people have felt really useful are those which were really simple to implement. Within just 2 months of building this app, I felt myself using this way more than I initially anticipated. An app like this is really useful if you&amp;rsquo;re organizing an event and you&amp;rsquo;d want to just start a conversation with a participant but you know for sure that you won&amp;rsquo;t be contacting them again after this one time event.&lt;/p>
&lt;p>Also really useful if you started talking to someone at a conference and you want to send them a link about your project.&lt;/p>
&lt;p>I&amp;rsquo;ve also used the app when I&amp;rsquo;ve gone to churches or festivals and have someone send a copy of the notice or brochure but usually folks only know to send via Whatsapp and hence need to save contact number.&lt;/p>
&lt;p>I found this really useful and when I showed it to a few friends, even they could instantly relate with the problem. I realized that opening up the app and entering a number is waay faster than opening browser, typing wa.me/+91 and then entering the 10 digit phone number. It won&amp;rsquo;t seem obvious until you actually try it out yourself!&lt;/p>
&lt;p>Hey, maybe you can try it out now and see if it&amp;rsquo;s useful to you as well✨.&lt;/p>
&lt;p>Get the code and APK file from &lt;a href="https://github.com/aldrinjenson/send-whatsapp-msg-without-save">here&lt;/a>&lt;/p></description></item></channel></rss>