<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Aldrin Jenson</title><link>https://aldrinjenson.me/posts/</link><description>Aldrin Jenson (Posts)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 12 Sep 2022 19:02:56 +0530</lastBuildDate><atom:link href="https://aldrinjenson.me/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Notes</title><link>https://aldrinjenson.me/posts/notes/</link><pubDate>Mon, 12 Sep 2022 19:02:56 +0530</pubDate><guid>https://aldrinjenson.me/posts/notes/</guid><description>&lt;ol>
&lt;li>
&lt;p>Reverting back git history from a commit:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git revert --no-commit 0766c053..HEAD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://stackoverflow.com/a/21718540/11879596">source: stackoverflow&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>getting the ipaddress quickly in most linux systems including termux:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ip a | grep inet
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Downloading protected pdfs from google drive and having them be searchable:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;a href="https://bytesbin.com/download-view-only-pdf-google-drive/">https://bytesbin.com/download-view-only-pdf-google-drive/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://askubuntu.com/a/474324">https://askubuntu.com/a/474324&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>How we hacked an entire computer labâœ¨</title><link>https://aldrinjenson.me/posts/hacking-cs-lab/</link><pubDate>Tue, 26 Jul 2022 19:09:07 +0530</pubDate><guid>https://aldrinjenson.me/posts/hacking-cs-lab/</guid><description>&lt;p>Linux is cool.&lt;/p>
&lt;p>Computer Networks is cool.&lt;/p>
&lt;p>Rick roll is cool.&lt;/p>
&lt;p>Our lab teacher - Titty sir, is definitely cool.&lt;/p>
&lt;p>So, hacking all the computers over there, should be cool too.?ðŸ™‚&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Short write up of how I wrote a script to play rick roll in all computers in our lab. ðŸ™‚&lt;/p>
&lt;center>
&lt;video alt="demo of us rick-rolling" src="https://aldrinjenson.me/videos/hackCSLab.mp4" controls muted poster="/thumbs/hackCSLab.jpg" >&lt;/video>
&lt;p class='caption'>In hindsight, should have added the --fullscreen flag to the browser as well!&lt;/p>
&lt;/center>
&lt;ol>
&lt;li>find your ip address using&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ip a | grep 192.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;center>
&lt;image src="https://aldrinjenson.me/images/hackCsLab/ipGrep.jpg" alt="ip grep image">&lt;/image>
&lt;p class='caption'>
If the computer is connected to two or more networks(ethernet and wifi for example) the above would result in more than one entries.
Note that the address ending with 255 is for broadcast and hence should not be used.
&lt;/p>
&lt;/center>
&lt;ol start="2">
&lt;li>Get the list of all devices connected to your network using the &lt;strong>nmap&lt;/strong> tool&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo nmap -sn 192.168.143.0-255
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo nmap -sn 192.168.143.0-255 &amp;gt; ips.txt &lt;span style="color:#75715e"># to store output to a file&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Install &lt;a href="sshpass">sshpass&lt;/a> on your host machine&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt install sshpass
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>(i) Create simple bash script to ssh into one file and remotely execute a command&lt;/li>
&lt;/ol>
&lt;center>
&lt;image src="https://aldrinjenson.me/images/hackCsLab/remoteExec.jpg" alt="Remote exec sample script">&lt;/image>
&lt;p class='caption'>
Simple script to remotely execute a command in a single client machine in network using sshpass.
&lt;/p>
&lt;/center>
&lt;ol start="4">
&lt;li>(ii) Create script to loop through the script and remotely execute a command.&lt;/li>
&lt;/ol>
&lt;center>
&lt;image src="https://aldrinjenson.me/images/hackCsLab/loopIpScript.jpg" alt="sample script for looping over ips and executing a bash command">&lt;/image>
&lt;p class='caption'>
Simple script to loop over a set of ips and execute a bash command.
&lt;/p>
&lt;/center>
&lt;h2 id="afterthoughts">Afterthoughts&lt;/h2>
&lt;p>There you go. This script should let you run a command remotely in all the devices in your network.&lt;/p>
&lt;p>I used this only once for playing rickRoll in all the computers in our lab just as a proof of concept.&lt;/p>
&lt;p>Now, even though we demoed using a rick roll, just know that if one could do this much, really dangerous stuff can be done once access to these many computers are granted. Stuff can range from crypto-mining to running keyloggers for accessing passwords of students.&lt;/p>
&lt;p>This worked perfectly in our case because the passwords of all the computers were same. In little more stricter scenarios, the passwords being same are rare and hence you&amp;rsquo;d need to create separate files to map the ips to passwords before looping through.&lt;/p>
&lt;p>Finally, we were able to pull this off only because the staff in CS Lab were kind and understanding of the student&amp;rsquo;s curiosity and interest to explore stuff.âœ¨&lt;/p>
&lt;p>I suppose I should mention that this is a powerful method and you should use it only with care respecting privacy of others in the network.ðŸ™‚&lt;/p></description></item><item><title>I gave a talk at an international conference and Murphy's law sucks!</title><link>https://aldrinjenson.me/posts/i-gave-a-talk/</link><pubDate>Tue, 26 Jul 2022 19:09:07 +0530</pubDate><guid>https://aldrinjenson.me/posts/i-gave-a-talk/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>I got an opportunity to do a Flash-Talk for IndiaFoss conference held in Bangalore on 23-24 July 2022 and boy, &lt;a href="https://en.wikipedia.org/wiki/Murphy's_law">Murphy&amp;rsquo;s law&lt;/a> messed up my presentation!&lt;/p>
&lt;center>
&lt;image src="https://aldrinjenson.me/images/indiaFoss/indiaFossTalk.jpg" alt="My talk at IndiaFoss"/>
&lt;p class='caption'>Excuse the 240p quality please!&lt;/p>
&lt;/center>
&lt;p>The topic of my talk was: &lt;strong>How to make sharing of digital assets as easy and accessible as possible.&lt;/strong>
It was based on &lt;a href="https://aldrinjenson.me/projects/whatsapp-msg-without-save/">an app I had made earlier&lt;/a> to send messages by using the most common app in one&amp;rsquo;s phone - Whatsapp, without having to save anyone&amp;rsquo;s contact number.&lt;/p>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>I was inspired by a talk which I heard over at IndiaFoss from Akash Hamirwasia who made a web-app called &lt;a href="https://blaze.vercel.app/">Blaze&lt;/a> for sending files over the internet using a website.
His project was cool, but to me it seemed like the common man would find it a bit difficult. When I talk about the common man, I&amp;rsquo;m talking about they who doesn&amp;rsquo;t even know to open web browsers(Yes, I&amp;rsquo;ve seen people to whom when I asked to open browser, they have opened settings and searched &amp;ldquo;browser&amp;rdquo; in the settings searchbar. Just know that you are really privileged if you think such people don&amp;rsquo;t exist).&lt;/p>
&lt;p>Whatsapp is the app with which people are most comfortable. If only there was a way to send files through whatsapp without having to save the contact number&amp;hellip;&lt;/p>
&lt;p>Introducing my app which solves exactly this problem. It generates a wa.me link and opens it behind the scenes so as to trigger and open whatsapp chat of the person whose number has just been entered.&lt;/p>
&lt;h2 id="about-the-talk">About the talk&lt;/h2>
&lt;p>So being inspired by Mr.Akash, I submitted my presentation and was selected to speak. I had been using Arch Linux for a while now and recently got a new laptop, but I was unsure if it would be able to connect to the HDMI port for the presentation. I saw others with ThinkPads easily connecting their laptops and presenting, so I thought Linux&amp;rsquo;s plug and play support would have me covered. Unfortunately, I was mistaken.&lt;/p>
&lt;p>I was given slot number 8 out of the 9 available slots, but by the time it was my turn, the participants had taken up more time than allotted and the event was running behind schedule.&lt;/p>
&lt;h2 id="et-tu-arch">Et tu Arch..&lt;/h2>
&lt;p>My name got called, I went up and connected my laptop to HDMI cable only to find nothing being presentedðŸ¥².&lt;/p>
&lt;p>Apparently my faith in Arch linux may have been a bit too much because had I bothered to check the status during some break maybe I wouldn&amp;rsquo;t have to face the difficulty.(Well technically, I tried doing that but then another speaker beat me to it and took a long time that I had to leave.. still..).&lt;/p>
&lt;p>So here I was in front of the stage with my laptop not being able to present and the schedule already really late for me to get another&amp;rsquo;s laptop.&lt;/p>
&lt;p>Well, I started speaking. I didn&amp;rsquo;t want to take up more time and delay the program. So I talked about the problem, about my solution and about my app. I had this cool demo planned where I would call up someone from the audience and will send them a hi over Whatsapp without having to save their contact information, but couldn&amp;rsquo;t do it without being able to present. Still I talked and shared my idea. I had a bit.ly link which I asked everyone to enter to see a demo and url of github repo so that people could check out the project later as well.&lt;/p>
&lt;h2 id="afterwords">Afterwords&lt;/h2>
&lt;p>Right after I finished the talk and went to sit, a guy near me asked if I could make something similar for iOS as well to which I had to reply by saying that I&amp;rsquo;m not having a macBook at present to compile and build for iOS even though I used Flutter to build the project.&lt;/p>
&lt;p>Before I even left the hall, 3 people came near me and asked if I could build for iOS as well. I mean this is something magical about giving a talk I think. People know about your project and you get feedback instantly! I was happy to realize that the problem I solved was worthwhile and that many people found the solution good enough to be used!&lt;/p>
&lt;h3 id="final-thoughts">Final Thoughts&lt;/h3>
&lt;p>This was the first time I was speaking at such a large conference and it certainly gave a whole different feel. While I was sad that I couldn&amp;rsquo;t demo the presentation, I was happy that this would lead more people to benefit from my project.âœ¨&lt;/p>
&lt;p>EDIT: Whatsapp recently introduced a click to chat feature recently which would replicate the functionality of my app. You just have to pasta an unsaved number to some chat and then click it again within whatsapp to take you to the whatsapp chat of that person.&lt;/p></description></item><item><title>How to host a Hugo static site using Github pages</title><link>https://aldrinjenson.me/posts/hosting-hugo-sites-on-gh-pages/</link><pubDate>Thu, 21 Oct 2021 00:20:33 +0530</pubDate><guid>https://aldrinjenson.me/posts/hosting-hugo-sites-on-gh-pages/</guid><description>&lt;p>It took me a day to fix a bug related to hosting a Hugo blog on github pages. Thought I&amp;rsquo;d compile down my learnings here.&lt;/p>
&lt;p>Check out these two links to get started with the local installation and setting up of the development environment. This part is quite easy.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://opensource.com/article/18/3/start-blog-30-minutes-hugo?utm_source=nomedium&amp;amp;utm_medium=web&amp;amp;utm_campaign=nomedium">Start a blog in 30 minutes with Hugo&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gohugo.io/getting-started/quick-start/">Official Hugo Quick Start Guide&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>By now you should be having a blog with atleast one post which can be previewed locally using &lt;code>hugo server -D&lt;/code> command.&lt;/p>
&lt;p>Now, the part which I found difficult is to host this site and make it available for the public. While there are guides available on the official docs for a lot of hosting options, the one for hosting with github pages isn&amp;rsquo;t very helpful (general opinion of a lot of developers).&lt;/p>
&lt;p>Anyways, here are the simple gotchas you need to take note of for easy hosting after following the official guide.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The baseUrl in your config file should point to the url where which your site will be deployed. (Usually, &lt;code>yourusername.github.io/&lt;/code>). No need to change it to rawgithubUserContent link if images or css doesn&amp;rsquo;t load initially.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If images are not being displayed on your site, add on &lt;code>canonifyURLs: true&lt;/code> in your &lt;code>config.yaml&lt;/code> file or the toml version in your &lt;code>config.toml&lt;/code> file if you are using toml.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When using the &lt;a href="https://github.com/peaceiris/actions-gh-pages">gh-pages&lt;/a> github action as mentioned in the docs for deploying with Github, it&amp;rsquo;s basically creating a new branch called gh-pages and then putting in the build files (from the public folder) in this branch and this is the one that is getting deployed in github pages. Basically, your source code is in the main branch, and the build output is in the gh-pages branch. (Not knowing this can confuse you in understanding how the magic happens ). The static HTML pages in this branch are deployed using github pages.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you want to host your site in a custom domain, then you got to create a file &lt;code>CNAME&lt;/code> and put it in the hugo static folder. This file should contain just the domain name eg: &lt;code>www.example.com&lt;/code>. This file from static folder will be put in the root folder of gh-pages branch once the site has been built by the gh action on push. If you get some errors regarding the domain, check out &lt;a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/troubleshooting-custom-domains-and-github-pages#cname-errors">this part&lt;/a> of the official docs.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>So there you go, these are the three simple points which you need to take note of so as to make the whole deployment process with hugo a bit easier. Now you can write blog posts and the site gets deployed once you push to the main branch.&lt;/p>
&lt;p>P.S. Just so you know, this current site you are looking at has been made completely using Hugo by following the above steps. So yeah, this works. You can check out the source code for this site &lt;a href="https://github.com/aldrinjenson/aldrinjenson.github.io">here&lt;/a> if interested.&lt;/p>
&lt;h2 id="pro-tip">Pro Tip:&lt;/h2>
&lt;p>If you want to make your life a bit easier, add the following alias script to your bash or zsh shell to start up the dev server and open up your browser quickly to the localhost hugo dev URL.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> alias hs&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;firefox --new-tab http://localhost:1313/ &amp;amp; hugo server -D&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above works for most modern browsers and hence you can replace firefox with the browser of your choice. So next time you want to write a new blog, fire up your editor and simply enter the &lt;code>hs&lt;/code> command in your blog directory to start up hugo dev server and have your browser navigate to the hugo dev port.&lt;/p></description></item><item><title>How to Speed up your programming workflow by adding auto-correct in git</title><link>https://aldrinjenson.me/posts/git-autocorrect/</link><pubDate>Sun, 01 Nov 2020 17:07:10 +0530</pubDate><guid>https://aldrinjenson.me/posts/git-autocorrect/</guid><description>&lt;p>In this short post I would like to share a neat trick I learned which you can use to speed up your development workflow - adding auto-correct to git.&lt;/p>
&lt;h2 id="current-scenario">Current Scenario&lt;/h2>
&lt;p>Currently, if you have a typo or some small error in your git command, git will automatically suggest the most plausible command corresponding to your keyboard input.
Majority of the time this suggested command is bound to be the one you were trying to use. However, just suggesting the command is not that helpful since the programmer still has to navigate around and change the typo.&lt;/p>
&lt;br/>
&lt;p>&lt;img src="https://aldrinjenson.me/images/git-autocorrect/image1.png" alt="image1">&lt;/p>
&lt;p align = "center">
Before setting up auto-correct
&lt;/p>
&lt;br/>
&lt;p>According to the official git &lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#_code_help_autocorrect_code">docs&lt;/a>,&lt;/p>
&lt;blockquote>
&lt;p>Git helpfully tries to figure out what you meant, but it still refuses to do it. If you set help.autocorrect to 1, Git will actually run this command for you&lt;/p>
&lt;/blockquote>
&lt;h2 id="solution">Solution:&lt;/h2>
&lt;p>Just open your terminal and add the following line&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git config --global help.autocorrect &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Adding the above command in your terminal results in the following :&lt;/p>
&lt;p>&lt;img src="https://aldrinjenson.me/images/git-autocorrect/image2.png" alt="image2">&lt;/p>
&lt;p align = "center">
With auto-correct turned on
&lt;/p>
&lt;br/>
&lt;p>See, git gave us a warning saying that there is a typo in our command and then executed the most matching/similar command.&lt;/p>
&lt;p>Now, here the value which we assigned at the end has to be an integer which represents the tenths of a second after which your command will be executed.&lt;/p>
&lt;h2 id="preventing-accidental-commands">Preventing accidental commands&lt;/h2>
&lt;p>If you are worried about git accidentally executing a command which is similar to your input but is not what you actually wanted to run, then you can add a few seconds of extra time before which the command will be executed, so that you can cancel out the execution if needed.&lt;/p>
&lt;p>This can be achieved by changing the final integer value at the end to a multiple of 10 (say 20 or 30 which corresponds to 2 or 3 seconds respectively).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git config --global help.autocorrect &lt;span style="color:#ae81ff">30&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Adding the above code in your terminal gives the following output when you have another typo in your code.&lt;/p>
&lt;p>&lt;img src="https://aldrinjenson.me/images/git-autocorrect/image3.png" alt="image3">&lt;/p>
&lt;p align = "center">
Executing a git command after 3 seconds
&lt;/p>
&lt;br/>
&lt;p>The actual command will be executed only after 3 seconds; which means that you can cancel the execution anytime within three seconds by just pressing &lt;strong>ctrl-c&lt;/strong>.&lt;/p>
&lt;h2 id="disabling-auto-correct">Disabling auto-correct:&lt;/h2>
&lt;p>If for some reason, you want to disable autocorrect feature (though I canâ€™t really imagine why), all you need is to set the final integer to 0.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git config --global help.autocorrect &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will revert back the config settings to the default stage â€“ to how it was before we modified it.&lt;/p>
&lt;p>&lt;img src="https://aldrinjenson.me/images/git-autocorrect/image4.png" alt="image4">&lt;/p>
&lt;p align = "center">
Just like how it was before
&lt;/p>
&lt;br/>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>I have been using this cool autocorrect feature of git for some years now and it&amp;rsquo;s really a cool time saver. The small few micro seconds it saves by preventing us from not pressing the up arrow and then navigating around to fix typos in our command, can get compounded and become a huge time saver in the long run.&lt;/p>
&lt;h3 id="references">References:&lt;/h3>
&lt;p>&lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration">Here&lt;/a> is the official git docs in case you have further doubts.&lt;/p>
&lt;p>P.S. Other than the auto-correct, git has got some other cool features as well. Be sure to check them out too while you are at it :).&lt;/p>
&lt;p>&lt;img src="https://aldrinjenson.me/images/bg/bg1.jpg" alt="background image">&lt;/p>
&lt;p>Have a good day!&lt;/p></description></item><item><title>Easiest way to add a splash screen in a React Native App</title><link>https://aldrinjenson.me/posts/add-splash-screen-in-react-native-app/</link><pubDate>Wed, 24 Jun 2020 00:58:27 +0530</pubDate><guid>https://aldrinjenson.me/posts/add-splash-screen-in-react-native-app/</guid><description>&lt;blockquote>
&lt;p>Note: This article was initially written in &lt;a href="https://medium.com/swlh/the-easiest-way-to-add-a-splash-screen-to-your-react-native-app-2d36bee3117b">Medium&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Hi, this article is a result of me spending a hell lot of time to figure out the best and easiest way to solve the above problem of adding a splash screen to a React-native app. Almost all the tutorials available as of when this post is being written (2020 June) have at least some part of the code outdated and so if you are lazy and tries to copy-paste all the code mentioned in them, your gradle config will break some way or the other and its total frustration.&lt;/p>
&lt;blockquote>
&lt;p>Note: If you are building your app using the awesome expo-cli, then you donâ€™t need to go through the below tutorial, adding a splash screen to an expo app is as simple as replacing the default splash image in assets folder with your own custom image and then renaming it as â€˜splash.pngâ€™.&lt;/p>
&lt;/blockquote>
&lt;p>Now, for those of us who have built the app with the good-old react-native init, adding a splash screen consists of the following 4 steps:&lt;/p>
&lt;h2 id="step-0-get-the-splash-image-ready">Step 0: Get the splash image ready!&lt;/h2>
&lt;p>I know, this is a no-brainier. But hey, do you exactly have the splash image in 6 different dimensions? No? Well guess what, you actually do need the same image in 6 dimensions! So how will you manage to make-do with just one image if thatâ€™s all what you got?&lt;/p>
&lt;p>Donâ€™t bother going to Photoshop and resizing, hereâ€™s an awesome tool I found to make the process of splash image generation a piece of cake.&lt;/p>
&lt;p>Just go to &lt;a href="https://apetools.webprofusion.com/#/tools/imagegorilla">this&lt;/a> site, add your one splash image(preferably with the highest quality), choose the required platform(andoid and/or ios) and punch the Kapow button). The tool will generate a zip file of the splash screen in various different pixel dimensions.&lt;/p>
&lt;p>Extract it and copy all the contents in the android and/or ios folder from the bundle to your android/app/src/main/res folder.&lt;/p>
&lt;h2 id="step-1-install-the-super-cool-npm-package-react-native-splash-screen">Step 1: Install the super cool npm package: react-native-splash-screen&lt;/h2>
&lt;p>This will make the whole process dead simple&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm i react-native-splash-screen
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or using yarn,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>yarn add react-native-splash-screen
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Note: if your react-native cli version is below 0.6, donâ€™t forget to link the above package using: &lt;code>react-native link react-native-splash-screen&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h2 id="step-2-configuration">Step 2: Configuration&lt;/h2>
&lt;h3 id="android">Android:&lt;/h3>
&lt;p>You have got to update the MainActivity.java file (located at &lt;code>android/app/src/main/java/com/your_project_name&lt;/code> folder) in order to use react-native-splash-screen in your project. Just make changes to the file like given below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> android.os.Bundle&lt;span style="color:#f92672">;&lt;/span>&lt;span style="color:#f92672">import&lt;/span> com.facebook.react.ReactActivity&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.devio.rn.splashscreen.SplashScreen&lt;span style="color:#f92672">;&lt;/span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MainActivity&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> ReactActivity &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span> &lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">onCreate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Bundle savedInstanceState&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SplashScreen&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">show&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">super&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">onCreate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>savedInstanceState&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ...other code
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, create a file called &lt;code>launch_screen.xml&lt;/code> in &lt;code>app/src/main/res/layout&lt;/code> (create the layout folder if it doesn&amp;rsquo;t exist). The contents of the file should be the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;RelativeLayout&lt;/span> &lt;span style="color:#a6e22e">xmlns:android=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">android:orientation=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;vertical&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">android:layout_width=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;match_parent&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">android:layout_height=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;match_parent&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ImageView&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">android:layout_width=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;match_parent&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">android:layout_height=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;match_parent&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">android:src=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;@drawable/screen&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">android:scaleType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;centerCrop&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/RelativeLayout&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we have got to add a color called primary_dark in app/src/main/res/values/colors.xml(create if it doesn&amp;rsquo;t exist already)by pasting in the following code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;resources&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;color&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;primary_dark&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>#000000&lt;span style="color:#f92672">&amp;lt;/color&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/resources&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ios">iOS:&lt;/h3>
&lt;p>Update AppDelegate.m (located at ios/splashapp) with the following additions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>#&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;AppDelegate.h&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#&lt;span style="color:#66d9ef">import&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">React&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">RCTBundleURLProvider&lt;/span>.&lt;span style="color:#a6e22e">h&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#&lt;span style="color:#66d9ef">import&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">React&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">RCTRootView&lt;/span>.&lt;span style="color:#a6e22e">h&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;RNSplashScreen.h&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>@implementation AppDelegate&lt;span style="color:#f92672">-&lt;/span> (BOOL)application:(UIApplication &lt;span style="color:#66d9ef">_&lt;/span>)application didFinishLaunchingWithOptions:(NSDictionary &lt;span style="color:#66d9ef">_&lt;/span>)launchOptions{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...other code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [RNSplashScreen show]; &lt;span style="color:#75715e">// or//[RNSplashScreen showSplash:@&amp;#34;LaunchScreen&amp;#34; inRootView:rootView];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> YES;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }@end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="step-3-hiding-the-splash-and-loading-your-main-screen">Step 3: Hiding the splash and loading your main-screen&lt;/h2>
&lt;p>By now, if you run your app, you would be able to see the splash image cover the entire screen(like it should) and showing forever(like it shouldnâ€™t). Basically it would never close, and there is even a chance of your app crashing after a few seconds of the image showing like this.&lt;/p>
&lt;p>Now, when should the splash screen be closed? Maybe when the main entry file of your app is executed? Yes! So letâ€™s just modify App.js so that exactly when the project files would finish loading and is ready to be executed, the splash screen would give way to your main/primary screen.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// make following changes to App.js
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">SplashScreen&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;react-native-splash-screen&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">App&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Component&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">componentDidMount&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// do stuff while splash screen is shown
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// After having done stuff (such as async tasks) hide the splash screen
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">SplashScreen&lt;/span>.&lt;span style="color:#a6e22e">hide&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In case you are using functional components, just call SplashScreen.hide() inside a &lt;code>useEffect&lt;/code> hook with an empty dependency array.&lt;/p>
&lt;hr>
&lt;p>And, there you go my friends, thatâ€™s all there is to it.&lt;/p>
&lt;p>I have tested the above in android and it works perfectly. Inability of having Apple device have prevented me from verifying it on iOS, but hopefully this should all work fine. If the above solution for some reason didnâ€™t work for you, or if you want to add some advanced effects in your splash screen like customizing the color of the status bar when loading etc, here are the references I used. However, do keep in mind that all software related guides(including this one) tend to get outdated as new features get added to the various packages used and some breaking change occurs. That being said, all the best to your project. Cheers âœ¨&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/handlebar-labs/how-to-add-a-splash-screen-to-a-react-native-app-ios-and-android-30a3cec835ae">https://medium.com/handlebar-labs/how-to-add-a-splash-screen-to-a-react-native-app-ios-and-android-30a3cec835ae&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.npmjs.com/package/react-native-splash-screen">https://www.npmjs.com/package/react-native-splash-screen&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.netguru.com/blog/react-native-splash-screen">https://www.netguru.com/blog/react-native-splash-screen&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>