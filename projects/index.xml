<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Aldrin's Blog</title><link>/projects/</link><description>Aldrin's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 19 Jan 2022 19:25:18 +0530</lastBuildDate><atom:link href="/projects/index.xml" rel="self" type="application/rss+xml"/><item><title>Moodle Automation</title><link>/projects/moodle-automation/</link><pubDate>Wed, 19 Jan 2022 19:25:18 +0530</pubDate><guid>/projects/moodle-automation/</guid><description>&lt;p>Reflections on a nodeJS program I wrote to automate marking online attendance.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>I used to attend online classes. Sometimes I&amp;rsquo;ll be sleepy or the class may be really boring, but I always used to attend them given a choice. However, at times I used to forget marking the attendance.&lt;/p>
&lt;p>The attendance marking system in our college(and in many other Govt. colleges) for online classes was kinda ridiculous. We use the awesome &lt;a href="https://moodle.com/lms/">Moodle LMS&lt;/a> system for managing online classes.
The students have to go to the Moodle course page every hour and mark the attendance for that particular subject happening at that particular hour. That&amp;rsquo;s right, the students mark their own attendance irrespective of whether they actually attends any classes at all🤦. The funniness of this situation becomes even more evident when the student is presented with the following three options for marking attendance in the course page:
Present, Late or Absent.
Seriously.. will any absent or late student actually mark the same given an option?🤷&lt;/p>
&lt;!-- todo: add image here -->
&lt;p>Anyways.. I used to attend classes, but the attendance marking was very hard for me. I used to occasionally forget and sometimes by the time I&amp;rsquo;d have remembered about marking the attendance, the hour would&amp;rsquo;ve run out and the option would have been gone to mark it for that subject.&lt;/p>
&lt;p>It once reached a dangerous point where I had only 38% of attendance for DS subject in which I had actually missed only 2 classes which I think were due to some genuine reasons. This led me to find a solution which was foolproof.&lt;/p>
&lt;h2 id="thought-process">Thought Process&lt;/h2>
&lt;p>I thought about the flow a student takes to mark his attendance.&lt;/p>
&lt;ul>
&lt;li>He navigates to the course page&lt;/li>
&lt;li>He logs in to the moodle account by entering email and password. (yeah there are no persistent cookies in Moodle to preserve login state, atleast it&amp;rsquo;s not set up in the Moodle installation our college uses).&lt;/li>
&lt;li>He clicks the attendance anchor tag element to go to the attendance page.&lt;/li>
&lt;li>He selects the list item for the date which is having a field for marking attendance.&lt;/li>
&lt;li>Once clicked he is navigated to another page having the 3 options: Present, Absent, Late&lt;/li>
&lt;li>He selects the radio button for Present(obviously)&lt;/li>
&lt;li>He clicks the Submit button.&lt;/li>
&lt;li>He sighs at having marked his own attendance. The End&lt;/li>
&lt;/ul>
&lt;p>The fact that I could describe the steps this way meant that I could definitely ask a computer to do these for me ie. to automate the process. Now the question was how to implement a program which could log in on my behalf and mark the attendance by following the above steps. Additionally I also wanted a way to let me know once the attendance had been successfully marked or if the attendance marking failed for some reason as then I could go and mark the attendance manually.&lt;/p>
&lt;h2 id="building-the-automation-program">Building the automation program&lt;/h2>
&lt;p>I used the nodeJs &lt;a href="https://github.com/puppeteer/puppeteer/">puppeteer&lt;/a> library for browser automation.
I had once used it an year before for generating PDFs out of html. &lt;br/>
Anyways, I created a new nodeJs project, installed puppeteer and added my username and password as environment variables.
&lt;br>
I created a file wherein I could add the subjectLinks for which I wanted to automatically mark attendance. I also installed expressJs and created a web UI - something like a dashboard which could show me the stats for various subjects - whether they were marked, when is the next check etc.&lt;/p>
&lt;p>I tested the program a couple of times. Testing was a bit slow because there would be only one slot for me to test in one hour when there is an actual attendance open to automate.&lt;/p>
&lt;p>Afterwards I installed the awesome &lt;a href="https://github.com/yagop/node-telegram-bot-api">node-telegram-bot-api&lt;/a> library for getting notifications through Telegram and also added some control commands as well.
Anyways, within a few days, I had ironed out the bugs(most of them that is) and had the code working fine. Now the question was regarding hosting the server.&lt;/p>
&lt;p>Running a web server is costly(atleast for a student that is). The only option I had was to use an AWS ec2 instance. In the initial code I wrote, I used the node-cron library to set a cron job which automatically executes the scraping program every 30 minutes from morning to evening every day and checks if any of my subject links have got an open attendance to mark. This worked fine.. but the problem was that this would mean my server would have to be continuously running to have the program be executed at the right time.
This was not acceptable.&lt;/p>
&lt;p>So I started looking for alternate solutions, and came upon this wonderful &lt;a href="https://cron-job.org/en/">site&lt;/a>🤩.My new approach didn&amp;rsquo;t have the cron script in my code. I had an API endpoint which will be called by the cron-job site every 30 minutes from morning to evening. I hosted by code in Heroku and gave the api endpoint url to the cron-job site to ping. Heroku has some serious limitations for free apps which prevents them to be up more than 21 days etc. With my new approach however this was not at all a problem as now my server will be active exactly only when the cron site executes ie. it&amp;rsquo;ll be active only when it is time to mark the attendance. No extra wasted awake time.&lt;/p>
&lt;p>I hosted the project, and I have to say by the end of semester I had more than 75% of attendance for all subjects. Mind you that I actually did attend all the online classes myself, just that I didn&amp;rsquo;t have to do the boring process of opening Moodle and marking the attendance manually.&lt;/p>
&lt;p>One doubt I initially had was if this was a good project from an ethical standpoint and whether my code could be used by others for getting attendance without coming to class. Since I was conflicted on this, for over one year, I didn&amp;rsquo;t tell to anyone about this project and kept the code in a private Github repo. However it was only a matter of time before I saw that students were just tired of this stupid process of manually going to moodle and marking their own attendance. I saw over 4 other automation projects for marking attendance, ie students were trying to find a way to get around the broken system;&lt;/p>
&lt;p>Me keeping my project closed because I was afraid of my code being misused didn&amp;rsquo;t really matter much, people were always looking for a workaround and it was only a matter of time before they follow similar paths that you took.&lt;/p>
&lt;p>That being said, each time I saw another attendance automation project, I couldn&amp;rsquo;t just think that my version of automation was actually kinda good. You didn&amp;rsquo;t even have to enter any timetable, just the attendance page urls would suffice. I saw projects for which you have to enter time-tables which was a problem because sometimes time tables may change or a different teacher may take class on a different subject if one teacher is on leave etc. Other automation projects I sad didn&amp;rsquo;t have a notification system as well, they were all python programs written to be run in the terminal. I was kinda happy though that I wasn&amp;rsquo;t the only one fed up of this system, but this also made me wonder if using your skills to get around a broken system is actually wrong..&lt;/p>
&lt;p>I open sourced the project after 14 months of the initial commit. Within that period I have seen good people losing attendance(and hence their marks due to the minimum 75% attendance scheme in Kerala colleges) because they had forgotten to mark in Moodle often times when they had attended the actual classes as well. I open sourced my code without any flashy announcements in the firm belief that if one is genuiniely looking for a solution, he should find it. As the Bible says, &amp;ldquo;Seek and You will Find&amp;rdquo;.&lt;/p>
&lt;p>Check out the code &lt;a href="https://github.com/aldrinjenson/moodle-automation">here&lt;/a> :).&lt;/p></description></item><item><title>Query Search Bot</title><link>/projects/query-search-bot/</link><pubDate>Sun, 24 Oct 2021 19:25:18 +0530</pubDate><guid>/projects/query-search-bot/</guid><description>&lt;p>I started my experiments with Telegram Bots in the November of 2020 when I wanted an easy way to receive notifications.
Discord was the first option, but it was just too cumbersome for the simple purpose of receiving notifications. Telegram was much more convenient and easy to use. I used and built various Telegram bots of different complexities during my tenure at TGH Tech. I also used it for my &lt;a href="/projects/moodle-automation">Moodle Automation&lt;/a> program as well.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>This is one of my first major Telegram bot and was first made to get myself familiar with the functions offered by the &lt;a href="https://github.com/yagop/node-telegram-bot-api">node-telegram-bot-api&lt;/a> library. The idea is simple - make Internet queries without leaving telegram.&lt;/p>
&lt;h2 id="the-flow">The flow&lt;/h2>
&lt;p>The steps involved are as follows:&lt;/p>
&lt;ul>
&lt;li>The user adds the bot to a group&lt;/li>
&lt;li>He uses a command to trigger the bot&lt;/li>
&lt;li>He sends the bot a query to search&lt;/li>
&lt;li>The bot sends the top search results of that particular query.&lt;/li>
&lt;li>END&lt;/li>
&lt;/ul>
&lt;h2 id="implementation">Implementation&lt;/h2>
&lt;p>Searching part is basically web-scraping. While google doesn&amp;rsquo;t provide a free api to search, there are some alternative implementation like &lt;a href="https://github.com/jarun/googler">googlr&lt;/a>. I tried to use these alternatives, but they either works only in the cli or were just too cumbersome to use.
&lt;br/>
With Google unavailable, I started looking for alternatives, which lead me to my answer -&amp;gt; Bing api. Initially I was a bit skeptical about using bing search engine, but turns out it&amp;rsquo;s the second most popular search engine after Google even though there&amp;rsquo;s a large market share gap.
I found that the results for search queries were quite reasonable as well.
&lt;br/>
So with bing fixed, I used the &lt;a href="https://www.npmjs.com/package/bing-scraper">bing-scraper&lt;/a> npm package for my query searching.&lt;/p>
&lt;hr/>
&lt;p>The logic was quite simple actually. Whenever the user sends a search query to the bot, in the backend, the bot uses the above library to scrape bing and find the top results which are then sent as response messages back to the user.&lt;/p>
&lt;p>Since this was a small project, I didn&amp;rsquo;t want to host it on a server as usual. Heroku was the first option I thought about. However, due to Heroku&amp;rsquo;s free tier limitations, once the server entered a sleep state, it needs an external HTTP request to wake it up. The telegram bot I set up was using constant polling mechanism to listen for requests, which meant that the telegram triggers won&amp;rsquo;t wake up the Heroku server.&lt;/p>
&lt;p>I initially tried to create a simple API endpoint from the server, and then constantly pinging it at regular intervals to prevent the server from going to sleep. However even this wasn&amp;rsquo;t sustainable as Heroku free tier has this limitation that your server cannot be active for more than 500 hours per month. Bummer.&lt;/p>
&lt;p>So as usual, I started looking for other options to get free hosting. I had an AWS account. I didn&amp;rsquo;t want to use and ec2 for this small project. But there were &lt;a href="https://aws.amazon.com/lambda">Lambdas&lt;/a> available. I didn&amp;rsquo;t have much experiences with serverless computing before, but this seemed like a good opportunity to try them out. AWS Lambda offers 1 million free requests per month, which seemed more than plenty for my use case😇.&lt;/p>
&lt;h2 id="implementing-lambda-functions">Implementing Lambda functions&lt;/h2>
&lt;p>Implementing lambda functions can be made very easy using the &lt;a href="https://www.serverless.com/">serverless framework&lt;/a>.
It was very confusing for me initially on the product&amp;rsquo;s name - Serverless, the same name as the serverless architecture. 🤷 I&amp;rsquo;ll refer to the Serverless platform with a capital S.
The process involved the following steps:&lt;/p>
&lt;ul>
&lt;li>You install Serverless cli and generates the serverless boilerplate for nodeJs(other languages also available)&lt;/li>
&lt;li>You create a Serverless account and login to your dashboard&lt;/li>
&lt;li>You connect your cloud provider(AWS Lambda in my case) to Serverless&lt;/li>
&lt;li>You push your code to a github repo and connect it to the Serverless platform. (optional)&lt;/li>
&lt;li>You enter the command &lt;code>sls deploy&lt;/code> in your code directory to deploy the code to the connected cloud provider.&lt;/li>
&lt;li>END&lt;/li>
&lt;/ul>
&lt;p>Now there was one change I had to make for the bot to work with serverless. Since serverless functions will be active only once a request has been received, my initial approach of using long polling(default approach in the node-telegram-bot-api library as well) to query for updates won&amp;rsquo;t work. So I used webhook approach to fix this issue. Basically once the user sends a message to the bot, it reaches the Telegram servers first, and then from there it calls the deployed serverless url wherein I have a switch statement that fires functions depending on the message content/command. &lt;a href="https://github.com/aldrinjenson/tg-querySearchBot/blob/d5260c7672909f07ca664bb075369f4bfbe0b5cd/index.js#L50">Here&amp;rsquo;s&lt;/a> the actual code implementation.
Check out the &lt;a href="https://github.com/aldrinjenson/tg-querySearchBot/blob/main/README.md">ReadMe file&lt;/a> as well where I&amp;rsquo;ve added some instructions on the process of setting up webhooks for telegram bots.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Once the serverless flow was understood, then building and deploying the bot was not that difficult. I had used this same bot as an example to explain the concept of building and deploying bots to many others. Overall even thought the project was kinda small in code or logic, it contained many learnings and people other than me were able to benefit out of this project. So Lesson learned, it&amp;rsquo;s better almost always to learn something by building rather than just by simply watching a Youtube tutorial without applying the concepts.&lt;/p>
&lt;p>This bot was actually the base of many other complex Telegram bots I made. By the end of 2 months in TGH Tech, I was pretty well-versed in the node-telegram-bot-api library and had even written several utility functions to make a lot of tasks much, much easier. It was my wish to group them together and publish them as a library so that many other who faced similar problems could use it. Sadly though, I got busy afterwards with other projects and by the time I was free, I had lost all touch with bots and I had this feeling that even if I had published them as a library, I may not be able to fix any issues people may raise or even test PRs because I won&amp;rsquo;t be working with any Telegram bots at all. Now though, while writing about this, I&amp;rsquo;m having different thoughts.. may be I think even if I won&amp;rsquo;t be feeling any motivation to fix these, the code could be useful to many people and maybe someone could fork it and work on it to improve.. The chances of bugs are pretty low as well, because several bots are running in production level at TGH tech using the utility functions I wrote.. so hmm, let me see, I&amp;rsquo;ll update it here if I&amp;rsquo;m publishing the library🤞.&lt;/p>
&lt;p>Check out the project &lt;a href="https://github.com/aldrinjenson/tg-querySearchBot">here&lt;/a>.
&lt;br/>
Live Demo at &lt;a href="https://t.me/querySearchBot">querySearchBot&lt;/a>.&lt;/p></description></item><item><title>Love Match Calculator</title><link>/projects/love-calculator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/love-calculator/</guid><description>&lt;p>Before reading any further, visit this &lt;a href="https://aldrinjenson.github.io/Love-Calc/">link&lt;/a> and follow the instructions.&lt;/p>
&lt;hr>
Seriously dude, only continue if you visited the page and followed the instructions.
&lt;p>This project was inspired by an article written by Subin Siby of Vidhya Institue of Sciences where he mentioned about how we once got pranked by a similar site.
I haven&amp;rsquo;t talked to him directly other than in an online meet when he answered a question I asked in chat, but I&amp;rsquo;ve heard he&amp;rsquo;s a cool dude interested in building cool software. (Wish I could talk to him directly for once🤞).&lt;/p>
&lt;p>Anyways, On April 1st 2020, I decided to build something since it&amp;rsquo;s April Fool&amp;rsquo;s and all. During those days, some of us in class had created a Whatsapp group for those interested in programming, where we shared different articles, tutorials etc for everyone to pick up and improve. In that group, began a conversation which somehow ended on the topic of compatibility between partners(I know, just the usual typical topic discussed in a programming group.😁). Anyway, I saw this message in the morning and this got me thinking. Since it was April Fool&amp;rsquo;s day, I definitely wanted to do something fun; plus around that time, I had gotten myself pretty familiar with the awesome CSS framework &lt;a href="https://materializecss.com/">Materialize-CSS&lt;/a> and I wanted to build something cool with it as well.
So with all these reasons, I decided to build a Love compatibility calculator(Not an actual one ofc.)&lt;/p>
&lt;h2 id="the-idea">The Idea&lt;/h2>
&lt;p>The idea was simple - prank folks by asking them to enter the details of their crush for finding the percentage of love compatibility between them. What&amp;rsquo;s the prank in this you ask? Well, once they details are submitted, instead of the data gets stored in a db and instead of a percentage value, the users get &lt;a href="https://en.wikipedia.org/wiki/Rickrolling">Rick Rolled&lt;/a>😇.&lt;/p>
&lt;h2 id="implementation">Implementation&lt;/h2>
&lt;p>The project was built fairly quickly. I started working on it in the afternoon and by evening the whole project was pretty much completed.
The site was built using just HTML, Materialize-CSS and vanilla Javascript.
I used firebase as the database since it was super quick to set up.&lt;/p>
&lt;p>Basically once the user filled the form with details, a POST request is made and a new record is created in the firebase DB.
The coding part was hence fairly easy. I added some GIFs and Mr.Been Youtube video as well.
Sadly though, I wasn&amp;rsquo;t able to figure out how to autoplay Youtube videos in HTML at that time.&lt;/p>
&lt;h2 id="aftermath">Aftermath&lt;/h2>
&lt;p>I hosted the site using Netlify and put the link in the above mentioned Whatsapp group.
Well, a lot of people tried it out and quite a good number of people entered the names of their actual crush. When they found out at the end that it was a prank, well some took the joke lightly while others it seemed were quite anxious🙈.&lt;/p>
&lt;p>I was actually very excited about this nice joke and had sent the link to 2 seniors from my college as well without much thinking. One chechi(elder sister) who was 3 years senior to me, sent me just one message after a while: &lt;code>&amp;quot;Why?&amp;quot;&lt;/code>&lt;/p>
&lt;p>All the excitement and pride of having built something cool suddenly drained out of me. I didn&amp;rsquo;t know how to reply. After a while I took down the site, cleared the database and apologized. She was cool about my innocent joke though, as she later told me that she had a hunch about this being some sort of phishing website, so it was cool and all. But I was very much shaken. At that time, I didn&amp;rsquo;t even know about the concept of phishing. On that day, I suddenly became very much aware of powers a programmer or a tech person holds. It&amp;rsquo;s easy to trick people with innocent looking sites and apps. as much cliché as it may sound, with great power, comes great responsibility. It is not that difficult even for a single person to create a make believe site and ask people to enter sensitive information in the promise of some great reward. The collected information could then be used to blackmail the user and collect money or whatever.&lt;/p>
&lt;p>This project hence, even though was a small one(only a few hours worth of work), it was an important one in my programming life. I realized that whatever you create could technically be used with a wrong intention as well which could result in major loss and sadness for people.&lt;/p>
&lt;p>The main site was took down, and I had removed the firebase Db connections. What you might have already seen contains just the UI. So no data is sent to anyone in case you actually entered any sensitive information when you visited the above site. But of-course, you were smart and you didn&amp;rsquo;t enter any actual details right?🌝&lt;/p>
&lt;p>Check out the project code &lt;a href="https://github.com/aldrinjenson/Love-Calc">here&lt;/a>!&lt;/p></description></item></channel></rss>